{"remainingRequest":"/var/www/minibank/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/minibank/src/views/patients/patientsList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/minibank/src/views/patients/patientsList.vue","mtime":1571913557841},{"path":"/var/www/minibank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/minibank/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/minibank/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/var/www/minibank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/minibank/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Format from 'date-fns/format'\n\n\n  export default {\n    data: () => ({\n      // search: null,\n      editDialog: false,\n      snackBar: false,\n      snackColor: '',\n      snackText: '',\n      number: v => v.length <= 5 || 'Input too long!',\n      payment: '',\n      search: '',\n      autoUpdate: true,\n      searchPatient: null,\n      stay: true,\n      searchPatients: { \n        searchInput: ''\n      },\n      searchPatientsBy: {\n        date: '',\n        time: 2\n      },\n      gender: [],\n      dialog: false,\n      inputRules: [\n        v => !!v || 'This Field is required'\n      ],\n      contactRules: [\n        (v) => !!v || 'This Field is required',\n        (v) => (v && v.length == 11) || 'Contact length must be 11 characters',\n\n      ],\n      editedIndex: -1,\n      editedItem: {\n        name: '',\n        age: '',\n        contact: '',\n        doctor_name: '',\n        date: '',\n        searchDate: '',\n        time: '',\n        gender: '',\n        editPatientsCheck: ''\n      },\n      defaultItem: {\n        name: '',\n        age: '',\n        contact: '',\n        doctor_name: '',\n        date: '',\n        time: '',\n        gender: '',\n        editPatientsCheck: ''\n      },\n      data: {\n        data: {\n          error: 1,\n          resMsg: \"Null Value is not allowed\"\n        }\n      }\n    }),\n    created () {\n      this.fetchData()\n      this.initialize()\n    },\n\n    \n    watch: {\n      dialog (val) {\n        val || this.close()\n      },\n      searchPatient (val) {\n        this.retrievePatientbySearch(val)\n      }\n    },\n    filters: {\n    timeFormate(time) {\n        time = time\n          .toString()\n          .match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n        if (time.length > 1) {\n          // If time format correct\n          time = time.slice(1); // Remove full string match value\n          time[5] = +time[0] < 12 ? \" AM\" : \" PM\"; // Set AM/PM\n          time[0] = +time[0] % 12 || 12; // Adjust hours\n        }\n        return time.join(\"\"); // return adjusted time or original string\n      }\n    },\n    computed: {\n      \n      jointPatientsDetails(){\n        return this.$store.getters.getJointPatientsDetails;\n      },\n      desserts(){\n        console.log(this.$store.getters.getPatients)\n        return this.$store.getters.getPatients\n        \n      },\n      userInfo() {\n        return this.$store.getters.getUserInfo;\n      },\n      patientInfo() {\n        return this.$store.getters.getPatientsBySearch\n      },\n      searchFilter(){\n        return this.patientInfo.filter((getPatient) => {\n          return (getPatient.name.toLowerCase().match(this.searchPatient) || getPatient.contact.match(this.searchPatient))\n        });\n      },\n      formTitle () {\n        return this.editedIndex === -1 ? 'Add Patient' : 'Edit Patient'\n      },\n      formattedDate (){\n        return this.date ? Format(this.date, 'YYYY MMM Do'): ''\n      },\n      headers(){\n        return this.$store.state.patientsHeaders;\n      },\n      getTimeSlot(){\n       var timeslots = this.$store.getters.getTimeSlots;\n       for(var i = 0; i < timeslots.length; i++) {\n         \n         //timeslots[i].time = this.timeFor(timeslots[i].start_time) + '-' + this.timeFor(timeslots[i].end_time)\n         timeslots[i].time = this.$options.filters.timeFormate(timeslots[i].start_time) + '-' + this.$options.filters.timeFormate(timeslots[i].end_time)\n       }\n        return timeslots;\n      }\n        \n    },\n    methods: {\n      fetchData() {\n        this.$store.dispatch('getPatient')\n        .then(response => {\n          this.searchPatientsBy.date = response.data.data.date\n          console.log(response.data.data)\n          this.searchPatientsBy.time = response.data.data.time.id\n        })\n        this.$store.dispatch(\"getTimeSlot\");\n\n      },\n      initialize(){\n        this.gender = ['Male', 'Female', 'Others']\n      },\n      retrievePatientbyDate(){\n        this.$store.dispatch('retrievePatientbyDate', this.searchPatientsBy);\n      },\n      retrievePatientbySearch(searchBy){\n          var searchInfo = {\n            'searchInput' : searchBy\n          }\n        this.$store.dispatch('retrievePatientbySearch', searchInfo);\n      },\n      editItem (item) {\n        this.stay = false\n        this.editedIndex = this.desserts.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n        this.editedItem.editPatientsCheck = 'editPatientInfo'\n        this.dialog = true\n        console.log(this.editedItem.editPatientsCheck)\n      },\n      addOldPatientSchedule(item){\n         this.editedIndex = this.searchFilter.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n      },\n      deleteItem (item) {\n        const index = this.desserts.indexOf(item)\n        if(confirm('Are you sure you want to delete this item?')){  \n          this.desserts.splice(index, 1);\n          this.$store.dispatch('deletePatient',item.id);\n        }\n        },\n      close () {\n        this.dialog = false\n        this.stay = true\n        setTimeout(() => {\n          this.defaultItem.time = this.$store.getters.getTimeSlots.start_time + '-'+ this.$store.getters.getTimeSlots.end_time\n          this.editedItem = Object.assign({}, this.defaultItem)\n          this.editedIndex = -1\n        }, 300)\n      },\n      save () {\n         if (this.$refs.form.validate()) {\n          if (this.editedIndex > -1) {\n            if(this.editedItem.editPatientsCheck == 'editPatientInfo'){\n             this.$store.dispatch('updatePatient', this.editedItem);\n              Object.assign(this.desserts[this.editedIndex], this.editedItem)\n            this.searchPatients.searchInput = '';\n            } else{\n              this.editedItem.editPatientsCheck = 'createSerial'\n              this.$store.dispatch('updatePatient', this.editedItem);\n              // Object.assign(this.desserts[this.editedIndex], this.editedItem)\n            this.searchPatients.searchInput = '';\n            }\n         \n            \n          } else {\n            // console.log('save')\n            this.$store.dispatch('savePatient',this.editedItem)\n            // this.desserts.push(this.editedItem)\n          }\n          this.close()\n          this.stay = true\n\n        }\n      },\n      viewDateFormate (date){\n            return date ? Format(date, 'YYYY MMM Do'): ''\n      },\n      attachSearchValue(item){\n         this.editedIndex = this.searchFilter.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n      },\n      getPrescriptionList(item){\n        this.$router.push(\"/patientsReport/report/\" + item.id)\n      },\n      resetValidation() {\n      this.$refs.form.resetValidation();\n      },\n      handleButtonClick(){\n        this.stay = true,\n        this.resetValidation()\n      },\n      saveAmount (item) {\n        if(!item.amount){\n          this.$store.commit('setResponseMsg', this.data)\n        }else{\n          this.$store.dispatch('savePayment', item)\n        }\n      },\n      cancelAmount () {\n        console.log('cancelAmount')\n      },\n      openAmount () {\n        console.log('openAmount')\n\n      },\n      closeAmount () {\n        console.log('closeAmount')\n      },\n    }\n  }\n\n",{"version":3,"sources":["patientsList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmQA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"patientsList.vue","sourceRoot":"src/views/patients","sourcesContent":["<template>\n  <div id=\"vue-app\">\n    <v-toolbar flat color=\"white\">\n      <v-toolbar-title class=\"grey--text\">Patients List</v-toolbar-title>\n      <v-divider\n        class=\"mx-2\"\n        inset\n        vertical\n      ></v-divider>\n      <v-spacer></v-spacer>\n      <template v-slot:extension>\n      </template>\n      <v-dialog v-model=\"dialog\" max-width=\"500px\">\n        <template v-slot:activator=\"{ on }\">\n          <v-btn class=\"btn\" v-on=\"on\" @click=\"handleButtonClick\">\n            <span aria-hidden=\"true\" class=\"btnLogo\">\n              <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\">\n                <path fill=\"#FF0000\" d=\"M16 16v14h4V20z\"></path>\n                <path fill=\"#000080\" d=\"M30 16H20l-4 4h14z\"></path>\n                <path fill=\"#008000\" d=\"M6 16v4h10l4-4z\"></path>\n                <path fill=\"#FFD700\" d=\"M20 16V6h-4v14z\"></path>\n                <path fill=\"none\" d=\"M0 0h36v36H0z\"></path>\n              </svg>\n            </span>\n            <span class=\"btnText\">Create Patient</span>\n          </v-btn>\n        </template>\n        <v-card id=\"modal\">\n          <v-card-title>\n            <span id=\"modalTitle\">{{ formTitle }}</span>\n          </v-card-title>\n          <v-divider></v-divider>\n          <v-card-text>\n\n            <v-combobox\n              v-model=\"searchPatients.searchInput\"\n              :items=\"searchFilter\"\n              :search-input.sync=\"searchPatient\"\n              item-text=\"contact\"\n              item-value=\"name\"\n              item-disabled\n              hint=\"Search by Contact Number\"\n              label=\"Search Old Patient\"\n              prepend-inner-icon=\"search\"\n              outline\n              open-on-clear\n              @input=\"addOldPatientSchedule\"\n            >\n              <template v-slot:item=\"data\">\n                <v-list-tile-content >\n                  <v-list-tile-title v-html=\"data.item.name\"></v-list-tile-title>\n                  <v-list-tile-sub-title v-html=\"'Contact: ' +data.item.contact +', Age: '+ data.item.age\"></v-list-tile-sub-title>\n                </v-list-tile-content>\n               <!-- <v-btn small fab dark color=\"cyan darken-2\" slot=\"activator\" @click=\"addOldPatientSchedule(data.item)\">\n                    <v-icon>add</v-icon>\n                </v-btn> -->\n              </template>\n            </v-combobox>\n          </v-card-text>\n          <v-card-text>\n              <v-form class=\"px-3\" ref=\"form\">\n                <v-text-field label=\"Patient Name\" v-model=\"editedItem.name\" prepend-icon=\"add_box\" :rules=\"inputRules\"></v-text-field>\n                <v-text-field label=\"Age\" v-model=\"editedItem.age\" prepend-icon=\"add_to_queue\" type=\"number\" :rules=\"inputRules\"></v-text-field>\n                <v-text-field label=\"Contact\" v-model=\"editedItem.contact\" prepend-icon=\"settings_phone\" type=\"number\" :rules=\"contactRules\"></v-text-field>\n                <!-- <v-text-field label=\"Doctor Name\" v-model=\"editedItem.doctor_name\" prepend-icon=\"add_to_queue\" :rules=\"inputRules\"></v-text-field> -->\n                <v-select\n                v-model=\"editedItem.gender\"\n                :items=\"gender\"\n                label=\"Select Gender\"\n                prepend-icon=\"person\"\n                >\n                  <template v-slot:item=\"props\">\n                    <v-list-tile-content >\n                      <v-list-tile-title v-html=\"props.item\"></v-list-tile-title>\n                    </v-list-tile-content>\n                  </template>\n                </v-select>\n                <v-menu v-if=\"stay\">\n                  <v-text-field :value=\"viewDateFormate(editedItem.date)\" slot=\"activator\" label=\"Select Date\" prepend-icon=\"date_range\" :rules=\"inputRules\"></v-text-field>\n                  <v-date-picker v-model=\"editedItem.date\"></v-date-picker>\n                </v-menu>\n                  <v-select\n                  v-model=\"editedItem.time\"\n                  :items=\"getTimeSlot\"\n                  item-text=\"time\"\n                  item-value=\"id\"\n                  label=\"Select Time\"\n                  prepend-icon=\"access_time\"\n                  v-if=\"stay\"\n                  >\n                    <template v-slot:item=\"data\">\n                      <v-list-tile-content >\n                        <v-list-tile-title>{{ data.item.start_time | timeFormate }} - {{ data.item.end_time | timeFormate}}</v-list-tile-title>\n                        <!-- <v-list-tile-sub-title v-html=\"'Contact: ' +data.item.contact +', Age: '+ data.item.age\"></v-list-tile-sub-title> -->\n                      </v-list-tile-content>\n                    </template>\n                  </v-select>\n              </v-form>\n          </v-card-text>\n          <v-divider></v-divider>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"blue darken-1\" flat @click=\"close\">Cancel</v-btn>\n            <v-btn color=\"blue darken-1\" flat @click=\"save\">Save</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-toolbar>\n    <v-layout row wrap>\n      <v-flex xs12 sm12 md8>\n        <v-layout row wrap>\n        <v-flex xs12 sm5 md5>\n        <v-menu>\n          <v-text-field :value=\"viewDateFormate(searchPatientsBy.date)\" slot=\"activator\" label=\"Filter by date\" prepend-icon=\"date_range\"></v-text-field>\n          <v-date-picker v-model=\"searchPatientsBy.date\"></v-date-picker>\n        </v-menu>\n        </v-flex>\n         <v-flex xs8 sm5 md5>\n        <v-select\n        v-model=\"searchPatientsBy.time\"\n        :items=\"getTimeSlot\"\n        item-text=\"time\"\n        item-value=\"id\"\n        label=\"Select Time\"\n        prepend-icon=\"access_time\"\n        >\n          <template v-slot:item=\"data\">\n            <v-list-tile-content >\n              <v-list-tile-title> {{ data.item.start_time | timeFormate }} - {{ data.item.end_time | timeFormate}} </v-list-tile-title>\n            </v-list-tile-content>\n          </template>\n        </v-select>\n      </v-flex>\n      <v-flex xs4 sm2 md2>\n      <v-btn class=\"btnSearch\" color=\"primary\" @click=\"retrievePatientbyDate\">Search</v-btn>\n      </v-flex>\n      </v-layout>\n      </v-flex>\n      <v-flex md4>\n      </v-flex>\n    </v-layout>\n    <v-layout row wrap>\n      <v-flex sm4 md8>\n      </v-flex>\n      <v-flex xs12 sm8 md4>\n    <v-text-field\n        v-model=\"search\"\n        append-icon=\"search\"\n        label=\"Search\"\n        single-line\n        hide-details\n        class=\"ma-4\"\n      ></v-text-field>\n      </v-flex>\n    </v-layout>\n\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"desserts\"\n      :search=\"search\"\n      class=\"elevation-1 ma-4 test\"\n    >\n      <template v-slot:items=\"props\">\n        <td class=\"text-xs\">{{ props.item.serial }}</td>\n        <td class=\"text-xs\" style=\"padding: 0px;\"><v-chip color=\"cyan\" text-color=\"white\">{{ props.item.name }}</v-chip></td>\n        <td class=\"text-xs\">{{ props.item.age }}</td>\n        <td class=\"text-xs\">{{ props.item.gender }}</td>\n        <td class=\"text-xs\">{{ props.item.contact }}</td>\n        <td class=\"text-xs\">{{ viewDateFormate(props.item.date) }}</td>\n        <td class=\"text-xs\">{{ props.item.time }}</td>\n        <td class=\"text-xs\" style=\"padding: 0px;\">\n            <v-tooltip top>\n                <v-btn small flat icon class=\"button\" color=\"cyan darken-2\" slot=\"activator\" @click=\"editItem(props.item)\">\n                    <!-- <v-icon >fas fa-user-edit fa-xs</v-icon> -->\n                    <i class=\"fas fa-user-edit fa-lg\"></i>\n                </v-btn>\n                <span>Edit Patient Details</span>\n            </v-tooltip>\n            <v-tooltip top>\n                <v-btn small flat icon dark class=\"button\" color=\"indigo\" v-if=\"userInfo.user_type == 'doctor'\" slot=\"activator\" router: v-bind:to=\"'../prescriptions/patient/' + props.item.id + '/'+ props.item.schedule_id + '/' + props.item.date\">\n                    <!-- <v-icon>fas fa-file-prescription</v-icon> -->\n                    <i class=\"fas fa-file-prescription fa-lg\"></i>\n\n                </v-btn>\n                <span>Prescription</span>\n            </v-tooltip>\n             <v-tooltip top>\n                <v-btn small flat icon dark class=\"button1\" style=\"background-color:#1693F3\" slot=\"activator\" @click=\"getPrescriptionList(props.item)\">\n                    <span>{{ props.item.visited_count }}</span>\n                </v-btn>\n                <span>Number of Prescription</span>\n            </v-tooltip>\n            <v-tooltip top>\n                <v-btn small flat icon dark class=\"button\" color=\"red\" slot=\"activator\" @click=\"deleteItem(props.item)\">\n                    <!-- <v-icon>fas fa-trash</v-icon> -->\n                    <i class=\"fas fa-trash fa-lg\"></i>\n                </v-btn>\n                <span>Delete Patient</span>\n            </v-tooltip>\n        </td>\n        <td class=\"text-xs\" v-if=\"props.item.visited_status\">\n          <v-tooltip top>\n                <v-btn small flat icon dark slot=\"activator\">\n                     <i class=\"fas fa-check-circle fa-lg \" id=\"visited\"></i>                             \n                </v-btn>\n                <span>Complete</span>\n            </v-tooltip>\n          <!-- <v-icon color=\"green\">far fa-check-circle</v-icon>\n          <i class=\"fas fa-check-circle fa-lg \" id=\"elementID\"></i>           -->\n      </td>\n      <td class=\"text-xs\" v-else>\n          <v-tooltip top>\n                <v-btn small flat icon dark slot=\"activator\">\n                  <i class=\"far fa-times-circle\" id=\"notVisited\"></i>                            \n                </v-btn>\n                <span>Not Visited</span>\n            </v-tooltip>\n      </td>\n        <td class=\"text-xs\">\n          <v-edit-dialog\n            :return-value.sync=\"props.item.amount\"\n            lazy\n            persistent\n            v-model=\"editDialog\"\n            @save=\"saveAmount(props.item)\"\n            @open=\"openAmount\"\n          >\n          {{ props.item.amount }}\n          <template v-slot:input>\n              <div class=\"mt-3 title\">Update Amount</div>\n            </template>\n            <template v-slot:input>\n              <v-text-field\n                v-model=\"props.item.amount\"\n                :rules=\"inputRules\"\n                label=\"Edit\"\n                single-line\n                counter\n                type=\"number\"\n                required\n              ></v-text-field>\n            </template>\n          </v-edit-dialog>\n          </td>\n\n      </template>\n      <template v-slot:no-data>\n        <h4>No Patient</h4>\n      </template>\n      <template v-slot:no-results>\n        <v-alert :value=\"true\" color=\"error\" icon=\"warning\">\n          Your search for \"{{ search }}\" found no results.\n        </v-alert>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n\n<script>\nimport Format from 'date-fns/format'\n\n\n  export default {\n    data: () => ({\n      // search: null,\n      editDialog: false,\n      snackBar: false,\n      snackColor: '',\n      snackText: '',\n      number: v => v.length <= 5 || 'Input too long!',\n      payment: '',\n      search: '',\n      autoUpdate: true,\n      searchPatient: null,\n      stay: true,\n      searchPatients: { \n        searchInput: ''\n      },\n      searchPatientsBy: {\n        date: '',\n        time: 2\n      },\n      gender: [],\n      dialog: false,\n      inputRules: [\n        v => !!v || 'This Field is required'\n      ],\n      contactRules: [\n        (v) => !!v || 'This Field is required',\n        (v) => (v && v.length == 11) || 'Contact length must be 11 characters',\n\n      ],\n      editedIndex: -1,\n      editedItem: {\n        name: '',\n        age: '',\n        contact: '',\n        doctor_name: '',\n        date: '',\n        searchDate: '',\n        time: '',\n        gender: '',\n        editPatientsCheck: ''\n      },\n      defaultItem: {\n        name: '',\n        age: '',\n        contact: '',\n        doctor_name: '',\n        date: '',\n        time: '',\n        gender: '',\n        editPatientsCheck: ''\n      },\n      data: {\n        data: {\n          error: 1,\n          resMsg: \"Null Value is not allowed\"\n        }\n      }\n    }),\n    created () {\n      this.fetchData()\n      this.initialize()\n    },\n\n    \n    watch: {\n      dialog (val) {\n        val || this.close()\n      },\n      searchPatient (val) {\n        this.retrievePatientbySearch(val)\n      }\n    },\n    filters: {\n    timeFormate(time) {\n        time = time\n          .toString()\n          .match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n        if (time.length > 1) {\n          // If time format correct\n          time = time.slice(1); // Remove full string match value\n          time[5] = +time[0] < 12 ? \" AM\" : \" PM\"; // Set AM/PM\n          time[0] = +time[0] % 12 || 12; // Adjust hours\n        }\n        return time.join(\"\"); // return adjusted time or original string\n      }\n    },\n    computed: {\n      \n      jointPatientsDetails(){\n        return this.$store.getters.getJointPatientsDetails;\n      },\n      desserts(){\n        console.log(this.$store.getters.getPatients)\n        return this.$store.getters.getPatients\n        \n      },\n      userInfo() {\n        return this.$store.getters.getUserInfo;\n      },\n      patientInfo() {\n        return this.$store.getters.getPatientsBySearch\n      },\n      searchFilter(){\n        return this.patientInfo.filter((getPatient) => {\n          return (getPatient.name.toLowerCase().match(this.searchPatient) || getPatient.contact.match(this.searchPatient))\n        });\n      },\n      formTitle () {\n        return this.editedIndex === -1 ? 'Add Patient' : 'Edit Patient'\n      },\n      formattedDate (){\n        return this.date ? Format(this.date, 'YYYY MMM Do'): ''\n      },\n      headers(){\n        return this.$store.state.patientsHeaders;\n      },\n      getTimeSlot(){\n       var timeslots = this.$store.getters.getTimeSlots;\n       for(var i = 0; i < timeslots.length; i++) {\n         \n         //timeslots[i].time = this.timeFor(timeslots[i].start_time) + '-' + this.timeFor(timeslots[i].end_time)\n         timeslots[i].time = this.$options.filters.timeFormate(timeslots[i].start_time) + '-' + this.$options.filters.timeFormate(timeslots[i].end_time)\n       }\n        return timeslots;\n      }\n        \n    },\n    methods: {\n      fetchData() {\n        this.$store.dispatch('getPatient')\n        .then(response => {\n          this.searchPatientsBy.date = response.data.data.date\n          console.log(response.data.data)\n          this.searchPatientsBy.time = response.data.data.time.id\n        })\n        this.$store.dispatch(\"getTimeSlot\");\n\n      },\n      initialize(){\n        this.gender = ['Male', 'Female', 'Others']\n      },\n      retrievePatientbyDate(){\n        this.$store.dispatch('retrievePatientbyDate', this.searchPatientsBy);\n      },\n      retrievePatientbySearch(searchBy){\n          var searchInfo = {\n            'searchInput' : searchBy\n          }\n        this.$store.dispatch('retrievePatientbySearch', searchInfo);\n      },\n      editItem (item) {\n        this.stay = false\n        this.editedIndex = this.desserts.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n        this.editedItem.editPatientsCheck = 'editPatientInfo'\n        this.dialog = true\n        console.log(this.editedItem.editPatientsCheck)\n      },\n      addOldPatientSchedule(item){\n         this.editedIndex = this.searchFilter.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n      },\n      deleteItem (item) {\n        const index = this.desserts.indexOf(item)\n        if(confirm('Are you sure you want to delete this item?')){  \n          this.desserts.splice(index, 1);\n          this.$store.dispatch('deletePatient',item.id);\n        }\n        },\n      close () {\n        this.dialog = false\n        this.stay = true\n        setTimeout(() => {\n          this.defaultItem.time = this.$store.getters.getTimeSlots.start_time + '-'+ this.$store.getters.getTimeSlots.end_time\n          this.editedItem = Object.assign({}, this.defaultItem)\n          this.editedIndex = -1\n        }, 300)\n      },\n      save () {\n         if (this.$refs.form.validate()) {\n          if (this.editedIndex > -1) {\n            if(this.editedItem.editPatientsCheck == 'editPatientInfo'){\n             this.$store.dispatch('updatePatient', this.editedItem);\n              Object.assign(this.desserts[this.editedIndex], this.editedItem)\n            this.searchPatients.searchInput = '';\n            } else{\n              this.editedItem.editPatientsCheck = 'createSerial'\n              this.$store.dispatch('updatePatient', this.editedItem);\n              // Object.assign(this.desserts[this.editedIndex], this.editedItem)\n            this.searchPatients.searchInput = '';\n            }\n         \n            \n          } else {\n            // console.log('save')\n            this.$store.dispatch('savePatient',this.editedItem)\n            // this.desserts.push(this.editedItem)\n          }\n          this.close()\n          this.stay = true\n\n        }\n      },\n      viewDateFormate (date){\n            return date ? Format(date, 'YYYY MMM Do'): ''\n      },\n      attachSearchValue(item){\n         this.editedIndex = this.searchFilter.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n      },\n      getPrescriptionList(item){\n        this.$router.push(\"/patientsReport/report/\" + item.id)\n      },\n      resetValidation() {\n      this.$refs.form.resetValidation();\n      },\n      handleButtonClick(){\n        this.stay = true,\n        this.resetValidation()\n      },\n      saveAmount (item) {\n        if(!item.amount){\n          this.$store.commit('setResponseMsg', this.data)\n        }else{\n          this.$store.dispatch('savePayment', item)\n        }\n      },\n      cancelAmount () {\n        console.log('cancelAmount')\n      },\n      openAmount () {\n        console.log('openAmount')\n\n      },\n      closeAmount () {\n        console.log('closeAmount')\n      },\n    }\n  }\n\n</script>\n\n<style scoped>\n#img{\n  width: 150%;\n  height: auto;\n  /* padding-left: 20px;  */\n}\n#modal {\n  font-family: 'Ubuntu', sans-serif;\n}\n\n#modalTitle {\n  font-size: 20px;\n}\n\n#visited {\n    color: green;\n    text-shadow: 1px 1px 1px #ccc;\n    font-size: 1.5em;\n}\n\n#notVisited{\n  color: red;\n    text-shadow: 1px 1px 1px #ccc;\n    font-size: 1.5em;\n}\n.btnSearch{\n  z-index: 0;\n  color: #fff;\n  padding: 0 0px;\n  font-family: 'Ubuntu', sans-serif;\n  font-size: .875rem;\n  font-weight: 300;\n  letter-spacing: .0107142857em;\n  text-transform: none;\n  line-height: 2.25rem;\n  border-radius: 24px;\n  width: auto;\n  max-width: 100%;\n  height: 42px;\n  box-shadow: 0 1px 2px 0 rgba(60,64,67,0.302), 0 1px 3px 1px rgba(60,64,67,0.149);\n  display: inline-flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  border: none;\n  fill: currentColor;\n  cursor: pointer;\n  overflow: hidden;\n}\n.btn {\n  z-index: 0;\n  background-color: #fff;\n  color: #3c4043;\n  padding: 0 24px;\n  font-family: 'Ubuntu', sans-serif;\n  font-size: .875rem;\n  font-weight: 500;\n  letter-spacing: .0107142857em;\n  text-transform: none;\n  line-height: 2.25rem;\n  border-radius: 24px;\n  width: auto;\n  max-width: 100%;\n  height: 48px;\n  box-shadow: 0 1px 2px 0 rgba(60,64,67,0.302), 0 1px 3px 1px rgba(60,64,67,0.149);\n  display: inline-flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  border: none;\n  fill: currentColor;\n  cursor: pointer;\n  overflow: hidden;\n}\n.btnLogo {\n  margin-right: 10px;\n  margin-top: 6px;\n}\n.btnText {\n  margin-bottom: 4px;\n}\n.button1{\n  width: 20px;\n  height: 20px;\n  font-size: 15px;\n   margin: 5px;\n}\n.button{\n  margin: 2px;\n}\n@media only screen and (max-width:600px){\n  .button{\n  width: 25px;\n  height: 25px;\n  }\n}\n\n</style>"]}]}