{"remainingRequest":"/var/www/prescription_frontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/prescription_frontEnd/src/views/members.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/prescription_frontEnd/src/views/members.vue","mtime":1569839399013},{"path":"/var/www/prescription_frontEnd/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/prescription_frontEnd/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/var/www/prescription_frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/prescription_frontEnd/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapActions } from \"vuex\";\nexport default {\n  data: () => ({\n    valid: true,\n    role: [\"Assistant\", \"Doctor\"],\n    showDoctor: false,\n    // allFormData: {\n    //   name: \"\",\n    //   email: \"\",\n    //   password: null,\n    //   password_confirmation: null,\n    //   role: \"\"\n    // },\n    dialog: false,\n    editedIndex: -1,\n    editedItem: {\n      name: \"\",\n      email: \"\",\n      password: null,\n      password_confirmation: null,\n      role: \"\",\n      doctor_id: \"\"\n    },\n    defaultItem: {\n      name: \"\",\n      email: \"\",\n      password: null,\n      password_confirmation: null,\n      role: \"\",\n      doctor_id: \"\"\n    },\n    show1: false,\n\n    emailRules: [\n      v => !!v || \"E-mail is required\",\n      // v => /.+.@.+/.test(v) || \"E-mail must be valid\"\n      v =>\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n          v\n        ) || \"E-mail must be valid\"\n    ],\n\n    passwordRules: [\n      v => !!v || \"password is required\",\n      v => (v && v.length > 5) || \"minimum 6 characters\"\n    ]\n  }),\n  watch: {\n    dialog(val) {\n      val || this.close();\n    }\n  },\n  created() {\n    this.fetchData();\n  },\n  computed: {\n    confirmPasswordRules() {\n      return () =>\n        this.editedItem.password === this.editedItem.password_confirmation ||\n        \"Password must match\";\n    },\n    userInfo() {\n      return this.$store.getters.getUserInfo;\n    },\n    headers() {\n      return this.$store.state.userDetails;\n    },\n    desserts() {\n      console.log(this.$store.getters.getUsers);\n      return this.$store.getters.getUsers;\n    },\n    roleSelection() {\n      if (this.userInfo.user_type == \"doctor\") {\n        return [this.role[0]];\n      } else {\n        return this.role;\n      }\n    },\n    getDoctorsForAssistant() {\n      console.log(\"loop1\");\n      var doctors = [];\n      for (var i = 0; i < this.desserts.length; i++) {\n        if (this.desserts[i][\"user_type\"] == \"doctor\") {\n          doctors.push({\n            id: this.desserts[i][\"id\"],\n            name: this.desserts[i][\"name\"]\n          });\n        }\n      }\n      // console.log(doctors);\n      return doctors;\n    }\n  },\n  methods: {\n    fetchData() {\n      this.$store.dispatch(\"getUsers\");\n    },\n    editItem(item) {\n      this.editedIndex = this.desserts.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n    close() {\n      this.dialog = false;\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      }, 300);\n    },\n    register() {\n      // console.log(this.editedItem);\n      if (this.$refs.form.validate()) {\n        if (this.editedIndex > -1) {\n          this.$store.dispatch(\"updateUser\", this.editedItem).then(response => {\n            if (!response.data.error) {\n              this.close();\n            }\n          });\n          Object.assign(this.desserts[this.editedIndex], this.editedItem);\n        } else {\n          console.log(\"test\");\n          this.$store\n            .dispatch(\"registerUser\", this.editedItem)\n            .then(response => {\n              console.log(response.data.error);\n              if (!response.data.error) {\n                this.close();\n              }\n            });\n\n          // this.desserts.push(this.editedItem)\n        }\n      }\n    },\n    validate() {\n      if (this.defaultItem.password != this.defaultItem.password_confirmation) {\n        return (this.show1 = true);\n      } else {\n        this.show1 = false;\n      }\n\n      if (this.$refs.form.validate()) {\n        this.snackbar = true;\n      }\n    },\n    reset() {\n      this.$refs.form.reset();\n    },\n    resetValidation() {\n      this.$refs.form.resetValidation();\n    },\n    checkAssistant(item) {\n      // console.log(item);\n      if (this.userInfo.user_type == \"hospital\")\n        if (item == \"Assistant\") {\n          this.showDoctor = true;\n        } else {\n          this.showDoctor = false;\n          this.editedItem.doctor = \"\";\n        }\n    }\n  }\n};\n",{"version":3,"sources":["members.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"members.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"vue-app\">\n    <v-toolbar flat color=\"white\">\n      <v-toolbar-title class=\"grey--text\">Member List</v-toolbar-title>\n      <v-divider class=\"mx-2\" inset vertical></v-divider>\n      <v-spacer></v-spacer>\n      <template v-slot:extension></template>\n      <v-dialog v-model=\"dialog\" max-width=\"500px\">\n        <template v-slot:activator=\"{ on }\">\n          <v-btn class=\"btn\" v-on=\"on\" @click=\"resetValidation\">\n            <span aria-hidden=\"true\" class=\"btnLogo\">\n              <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\">\n                <path fill=\"#FF0000\" d=\"M16 16v14h4V20z\" />\n                <path fill=\"#000080\" d=\"M30 16H20l-4 4h14z\" />\n                <path fill=\"#008000\" d=\"M6 16v4h10l4-4z\" />\n                <path fill=\"#FFD700\" d=\"M20 16V6h-4v14z\" />\n                <path fill=\"none\" d=\"M0 0h36v36H0z\" />\n              </svg>\n            </span>\n            <span class=\"btnText\">Add Member</span>\n          </v-btn>\n        </template>\n        <v-card id=\"modal\" v-on:keyup.enter=\"register\">\n          <v-card-title>\n            <span id=\"modalTitle\">Add New Member</span>\n          </v-card-title>\n          <v-divider></v-divider>\n          <v-card-text>\n            <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n              <v-select\n                :items=\"roleSelection\"\n                v-model=\"editedItem.role\"\n                @change=\"checkAssistant\"\n                label=\"Select role\"\n              ></v-select>\n              <v-select\n                v-if=\"showDoctor\"\n                :items=\"getDoctorsForAssistant\"\n                item-text=\"name\"\n                item-value=\"id\"\n                v-model=\"editedItem.doctor_id\"\n                label=\"Select Doctor\"\n              ></v-select>\n              <v-text-field\n                v-model=\"editedItem.name\"\n                :rules=\"[v => !!v || 'Name is required']\"\n                label=\"Name\"\n                required\n              ></v-text-field>\n\n              <v-text-field v-model=\"editedItem.email\" :rules=\"emailRules\" label=\"E-mail\" required></v-text-field>\n\n              <v-text-field\n                v-model=\"editedItem.password\"\n                type=\"password\"\n                :rules=\"passwordRules\"\n                label=\"Password\"\n                required\n              ></v-text-field>\n\n              <v-text-field\n                v-model=\"editedItem.password_confirmation\"\n                type=\"password\"\n                :rules=\"[confirmPasswordRules,passwordRules]\"\n                label=\"Confirm Password\"\n                required\n              ></v-text-field>\n              <p v-if=\"show1\" class=\"error\">the password you have given do not match</p>\n\n              <v-btn :disabled=\"!valid\" color=\"success\" @click.prevent=\"register\">Submit</v-btn>\n\n              <v-btn color=\"error\" @click=\"reset\">Reset Form</v-btn>\n\n              <!-- <v-btn color=\"warning\" @click=\"resetValidation\">Reset Validation</v-btn> -->\n            </v-form>\n          </v-card-text>\n        </v-card>\n      </v-dialog>\n    </v-toolbar>\n    <v-data-table :headers=\"headers\" :items=\"desserts\" class=\"elevation-1 ma-4\">\n      <template v-slot:items=\"props\">\n        <td class=\"text-xs\">{{ props.item.name }}</td>\n        <td class=\"text-xs\">{{ props.item.email }}</td>\n        <td class=\"text-xs\">{{ props.item.user_type }}</td>\n        <td>\n          <v-btn fab small dark color=\"cyan darken-2\" @click=\"editItem(props.item)\">\n            <v-icon>edit</v-icon>\n          </v-btn>\n        </td>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n<script>\nimport { mapGetters, mapActions } from \"vuex\";\nexport default {\n  data: () => ({\n    valid: true,\n    role: [\"Assistant\", \"Doctor\"],\n    showDoctor: false,\n    // allFormData: {\n    //   name: \"\",\n    //   email: \"\",\n    //   password: null,\n    //   password_confirmation: null,\n    //   role: \"\"\n    // },\n    dialog: false,\n    editedIndex: -1,\n    editedItem: {\n      name: \"\",\n      email: \"\",\n      password: null,\n      password_confirmation: null,\n      role: \"\",\n      doctor_id: \"\"\n    },\n    defaultItem: {\n      name: \"\",\n      email: \"\",\n      password: null,\n      password_confirmation: null,\n      role: \"\",\n      doctor_id: \"\"\n    },\n    show1: false,\n\n    emailRules: [\n      v => !!v || \"E-mail is required\",\n      // v => /.+.@.+/.test(v) || \"E-mail must be valid\"\n      v =>\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n          v\n        ) || \"E-mail must be valid\"\n    ],\n\n    passwordRules: [\n      v => !!v || \"password is required\",\n      v => (v && v.length > 5) || \"minimum 6 characters\"\n    ]\n  }),\n  watch: {\n    dialog(val) {\n      val || this.close();\n    }\n  },\n  created() {\n    this.fetchData();\n  },\n  computed: {\n    confirmPasswordRules() {\n      return () =>\n        this.editedItem.password === this.editedItem.password_confirmation ||\n        \"Password must match\";\n    },\n    userInfo() {\n      return this.$store.getters.getUserInfo;\n    },\n    headers() {\n      return this.$store.state.userDetails;\n    },\n    desserts() {\n      console.log(this.$store.getters.getUsers);\n      return this.$store.getters.getUsers;\n    },\n    roleSelection() {\n      if (this.userInfo.user_type == \"doctor\") {\n        return [this.role[0]];\n      } else {\n        return this.role;\n      }\n    },\n    getDoctorsForAssistant() {\n      console.log(\"loop1\");\n      var doctors = [];\n      for (var i = 0; i < this.desserts.length; i++) {\n        if (this.desserts[i][\"user_type\"] == \"doctor\") {\n          doctors.push({\n            id: this.desserts[i][\"id\"],\n            name: this.desserts[i][\"name\"]\n          });\n        }\n      }\n      // console.log(doctors);\n      return doctors;\n    }\n  },\n  methods: {\n    fetchData() {\n      this.$store.dispatch(\"getUsers\");\n    },\n    editItem(item) {\n      this.editedIndex = this.desserts.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n    close() {\n      this.dialog = false;\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      }, 300);\n    },\n    register() {\n      // console.log(this.editedItem);\n      if (this.$refs.form.validate()) {\n        if (this.editedIndex > -1) {\n          this.$store.dispatch(\"updateUser\", this.editedItem).then(response => {\n            if (!response.data.error) {\n              this.close();\n            }\n          });\n          Object.assign(this.desserts[this.editedIndex], this.editedItem);\n        } else {\n          console.log(\"test\");\n          this.$store\n            .dispatch(\"registerUser\", this.editedItem)\n            .then(response => {\n              console.log(response.data.error);\n              if (!response.data.error) {\n                this.close();\n              }\n            });\n\n          // this.desserts.push(this.editedItem)\n        }\n      }\n    },\n    validate() {\n      if (this.defaultItem.password != this.defaultItem.password_confirmation) {\n        return (this.show1 = true);\n      } else {\n        this.show1 = false;\n      }\n\n      if (this.$refs.form.validate()) {\n        this.snackbar = true;\n      }\n    },\n    reset() {\n      this.$refs.form.reset();\n    },\n    resetValidation() {\n      this.$refs.form.resetValidation();\n    },\n    checkAssistant(item) {\n      // console.log(item);\n      if (this.userInfo.user_type == \"hospital\")\n        if (item == \"Assistant\") {\n          this.showDoctor = true;\n        } else {\n          this.showDoctor = false;\n          this.editedItem.doctor = \"\";\n        }\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n#modal {\n  font-family: \"Ubuntu\", sans-serif;\n}\n\n#modalTitle {\n  font-size: 20px;\n}\n.btn {\n  z-index: 0;\n  background-color: #fff;\n  color: #3c4043;\n  padding: 0 24px;\n  font-family: \"Ubuntu\", sans-serif;\n  font-size: 0.875rem;\n  font-weight: 500;\n  letter-spacing: 0.0107142857em;\n  text-transform: none;\n  line-height: 2.25rem;\n  border-radius: 24px;\n  width: auto;\n  max-width: 100%;\n  height: 48px;\n  box-shadow: 0 1px 2px 0 rgba(60, 64, 67, 0.302),\n    0 1px 3px 1px rgba(60, 64, 67, 0.149);\n  display: inline-flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  border: none;\n  fill: currentColor;\n  cursor: pointer;\n  overflow: hidden;\n}\n.btnLogo {\n  margin-right: 10px;\n  margin-top: 6px;\n}\n.btnText {\n  margin-bottom: 4px;\n}\n.signup-form-header {\n  background-color: transparent;\n  border: 0;\n  color: #333;\n  margin-bottom: 15px;\n  text-align: center;\n  text-shadow: none;\n}\n.auth-form-header h1 {\n  font-size: 24px;\n  font-weight: 300;\n  letter-spacing: -0.5px;\n}\n</style>"]}]}