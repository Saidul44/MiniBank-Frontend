{"remainingRequest":"/var/www/minibank/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/minibank/src/views/settings/timeSlotSettings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/minibank/src/views/settings/timeSlotSettings.vue","mtime":1572703966472},{"path":"/var/www/minibank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/minibank/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/minibank/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/var/www/minibank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/minibank/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VueTimepicker from \"vue2-timepicker\";\nimport UploadButton from \"vuetify-upload-button\";\n\nexport default {\n  components: {\n    \"upload-btn\": UploadButton\n  },\n  data: () => ({\n    dialog1: false,\n    dialog2: false,\n    TimeValue: null,\n    inputRules: [v => !!v || \"This Field is required\"],\n    editedIndex: -1,\n    editedItem: {\n      start_time: \"\",\n      end_time: \"\"\n    },\n    defaultItem: {\n      start_time: null,\n      end_time: null\n    }\n  }),\n  created() {\n    this.fetchData();\n    // this.fetchFilteredData();\n  },\n  computed: {\n    formTitle() {\n      return this.editedIndex === -1 ? \"Add New Slot\" : \"Edit Slot\";\n    },\n    formTitleHeader() {\n      return this.editedIndex === -1 ? \"Add Header\" : \"Edit Slot\";\n    },\n    headers() {\n      return this.$store.state.timeSlotHeaders;\n    },\n    desserts() {\n      return this.$store.getters.getTimeSlots;\n    }\n  },\n  watch: {\n    dialog1(val) {\n      val || this.close();\n    },\n    dialog2(val) {\n      val || this.close();\n    }\n  },\n  filters: {\n    timeFormate(time) {\n      time = time\n        .toString()\n        .match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n      if (time.length > 1) {\n        // If time format correct\n        time = time.slice(1); // Remove full string match value\n        time[5] = +time[0] < 12 ? \" AM\" : \" PM\"; // Set AM/PM\n        time[0] = +time[0] % 12 || 12; // Adjust hours\n      }\n      return time.join(\"\"); // return adjusted time or original string\n    }\n  },\n  methods: {\n    fetchData() {\n      this.$store.dispatch(\"getTimeSlot\");\n    },\n    editItem(item) {\n      this.editedIndex = this.desserts.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog2 = true;\n    },\n    close() {\n      this.dialog1 = false;\n      this.dialog2 = false;\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      }, 300);\n    },\n    save() {\n      if (this.$refs.form.validate()) {\n        if (this.editedIndex > -1) {\n          this.$store.dispatch(\"updateTimeSlot\", this.editedItem);\n          Object.assign(this.desserts[this.editedIndex], this.editedItem);\n        } else {\n          this.$store.dispatch(\"saveTimeSlot\", this.editedItem);\n        }\n        this.close();\n      }\n    }\n  }\n};\n",{"version":3,"sources":["timeSlotSettings.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"timeSlotSettings.vue","sourceRoot":"src/views/settings","sourcesContent":["<template>\n  <div>\n    <v-toolbar flat color=\"white\">\n      <v-toolbar-title class=\"grey--text\">Time-Slot Settings</v-toolbar-title>\n      <v-divider class=\"mx-2\" inset vertical></v-divider>\n      <v-spacer></v-spacer>\n      <v-dialog v-model=\"dialog2\" max-width=\"600px\" class=\"abc\">\n        <template v-slot:activator=\"{ on }\">\n          <v-btn class=\"btn\" v-on=\"on\">\n            <span aria-hidden=\"true\" class=\"btnLogo\">\n              <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\">\n                <path fill=\"#FF0000\" d=\"M16 16v14h4V20z\" />\n                <path fill=\"#000080\" d=\"M30 16H20l-4 4h14z\" />\n                <path fill=\"#008000\" d=\"M6 16v4h10l4-4z\" />\n                <path fill=\"#FFD700\" d=\"M20 16V6h-4v14z\" />\n                <path fill=\"none\" d=\"M0 0h36v36H0z\" />\n              </svg>\n            </span>\n            <span class=\"btnText\">Create Slot</span>\n          </v-btn>\n        </template>\n        <v-card id=\"modal\" v-on:keyup.enter=\"save\">\n          <v-card-title>\n            <span id=\"modalTitle\">{{ formTitle }}</span>\n          </v-card-title>\n          <v-divider></v-divider>\n          <v-card-text>\n            <v-form class=\"px-3\" ref=\"form\" id=\"form\">\n              <v-layout wrap>\n                <v-flex md12 lg6>\n                  <h4>Starting Time</h4>\n                  <v-time-picker\n                    v-model=\"editedItem.start_time\"\n                    width=\"220\"\n                    scrollable\n                    :rules=\"inputRules\"\n                  ></v-time-picker>\n                </v-flex>\n                <v-flex md12 lg6>\n                  <h4>Ending Time</h4>\n                  <v-time-picker\n                    v-model=\"editedItem.end_time\"\n                    width=\"220\"\n                    scrollable\n                    :rules=\"inputRules\"\n                  ></v-time-picker>\n                </v-flex>\n              </v-layout>\n            </v-form>\n          </v-card-text>\n          <v-divider></v-divider>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"blue darken-1\" flat @click=\"close\">Cancel</v-btn>\n            <v-btn color=\"blue darken-1\" flat @click=\"save\">Save</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-toolbar>\n    <v-layout wrap>\n      <v-flex md12>\n        <v-data-table :headers=\"headers\" :items=\"desserts\" class=\"elevation-1 ma-4\">\n          <template v-slot:items=\"props\">\n            <td class=\"text-xs\">{{ props.item.id }}</td>\n            <td class=\"text-xs\">{{ props.item.start_time | timeFormate }}</td>\n            <td class=\"text-xs\">{{ props.item.end_time | timeFormate }}</td>\n\n            <td class=\"text-xs layout px-0\">\n              <v-tooltip top>\n                <v-btn small fab dark color=\"cyan\" slot=\"activator\" @click=\"editItem(props.item)\">\n                  <v-icon>edit</v-icon>\n                </v-btn>\n                <span>Edit Doctor Details</span>\n              </v-tooltip>\n            </td>\n          </template>\n        </v-data-table>\n      </v-flex>\n    </v-layout>\n  </div>\n</template>\n\n<script>\nimport VueTimepicker from \"vue2-timepicker\";\nimport UploadButton from \"vuetify-upload-button\";\n\nexport default {\n  components: {\n    \"upload-btn\": UploadButton\n  },\n  data: () => ({\n    dialog1: false,\n    dialog2: false,\n    TimeValue: null,\n    inputRules: [v => !!v || \"This Field is required\"],\n    editedIndex: -1,\n    editedItem: {\n      start_time: \"\",\n      end_time: \"\"\n    },\n    defaultItem: {\n      start_time: null,\n      end_time: null\n    }\n  }),\n  created() {\n    this.fetchData();\n    // this.fetchFilteredData();\n  },\n  computed: {\n    formTitle() {\n      return this.editedIndex === -1 ? \"Add New Slot\" : \"Edit Slot\";\n    },\n    formTitleHeader() {\n      return this.editedIndex === -1 ? \"Add Header\" : \"Edit Slot\";\n    },\n    headers() {\n      return this.$store.state.timeSlotHeaders;\n    },\n    desserts() {\n      return this.$store.getters.getTimeSlots;\n    }\n  },\n  watch: {\n    dialog1(val) {\n      val || this.close();\n    },\n    dialog2(val) {\n      val || this.close();\n    }\n  },\n  filters: {\n    timeFormate(time) {\n      time = time\n        .toString()\n        .match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n      if (time.length > 1) {\n        // If time format correct\n        time = time.slice(1); // Remove full string match value\n        time[5] = +time[0] < 12 ? \" AM\" : \" PM\"; // Set AM/PM\n        time[0] = +time[0] % 12 || 12; // Adjust hours\n      }\n      return time.join(\"\"); // return adjusted time or original string\n    }\n  },\n  methods: {\n    fetchData() {\n      this.$store.dispatch(\"getTimeSlot\");\n    },\n    editItem(item) {\n      this.editedIndex = this.desserts.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog2 = true;\n    },\n    close() {\n      this.dialog1 = false;\n      this.dialog2 = false;\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      }, 300);\n    },\n    save() {\n      if (this.$refs.form.validate()) {\n        if (this.editedIndex > -1) {\n          this.$store.dispatch(\"updateTimeSlot\", this.editedItem);\n          Object.assign(this.desserts[this.editedIndex], this.editedItem);\n        } else {\n          this.$store.dispatch(\"saveTimeSlot\", this.editedItem);\n        }\n        this.close();\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n#modal {\n  font-family: \"Ubuntu\", sans-serif;\n}\n\n#modalTitle {\n  font-size: 20px;\n}\n\n.btn {\n  z-index: 0;\n  background-color: #fff;\n  color: #3c4043;\n  padding: 0 24px;\n  font-family: \"Ubuntu\", sans-serif;\n  font-size: 0.875rem;\n  font-weight: 500;\n  letter-spacing: 0.0107142857em;\n  text-transform: none;\n  line-height: 2.25rem;\n  border-radius: 24px;\n  width: auto;\n  max-width: 100%;\n  height: 48px;\n}\n\n.btnLogo {\n  margin-right: 10px;\n  margin-top: 6px;\n}\n\n.btnText {\n  margin-bottom: 4px;\n}\n</style>\n"]}]}