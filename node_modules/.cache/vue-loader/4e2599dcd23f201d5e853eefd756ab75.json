{"remainingRequest":"/var/www/minibank/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/minibank/src/views/tests/testsList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/minibank/src/views/tests/testsList.vue","mtime":1570628808980},{"path":"/var/www/minibank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/minibank/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/minibank/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/var/www/minibank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/minibank/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data: () => ({\n    dialog: false,\n\n    editedIndex: -1,\n    editedItem: {\n      name: \"\",\n      group: \"\"\n    },\n    defaultItem: {\n      name: \"\",\n      group: \"\"\n    },\n    nameRules: [v => !!v || \"Name is required\"],\n    groupRules: [v => !!v || \"Group is required\"]\n  }),\n  computed: {\n    desserts() {\n      return this.$store.getters.getTests;\n    },\n    formTitle() {\n      return this.editedIndex === -1 ? \"Add New Test\" : \"Edit Test\";\n    },\n    headers() {\n      return this.$store.state.testsHeaders;\n    }\n  },\n  watch: {\n    dialog(val) {\n      val || this.close();\n    }\n  },\n  created() {\n    // this.initialize()\n    this.$store.dispatch(\"getTest\");\n  },\n  methods: {\n    reset() {},\n    // initialize () {\n    //   this.desserts = [\n    //     {\n    //       name: 'Frozen Yogurt',\n    //       group: 'Frozen',\n    //     },\n    //     {\n    //       name: 'Ice cream sandwich',\n    //       group: 'cream',\n    //     },\n\n    //   ]\n    // },\n    editItem(item) {\n      this.editedIndex = this.desserts.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      const index = this.desserts.indexOf(item);\n      if (confirm(\"Are you sure you want to delete this item?\")) {\n        this.desserts.splice(index, 1);\n        this.$store.dispatch(\"deleteTest\", item.id);\n      }\n    },\n    close() {\n      this.dialog = false;\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      }, 300);\n    },\n    save() {\n      if (this.$refs.form.validate()) {\n        if (this.editedIndex > -1) {\n          this.$store.dispatch(\"updateTest\", this.editedItem);\n\n          Object.assign(this.desserts[this.editedIndex], this.editedItem);\n        } else {\n          this.$store.dispatch(\"saveTest\", this.editedItem);\n          // this.desserts.push(this.editedItem)\n        }\n        this.close();\n      }\n    },\n    resetValidation() {\n      this.$refs.form.resetValidation();\n    }\n  }\n};\n",{"version":3,"sources":["testsList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"testsList.vue","sourceRoot":"src/views/tests","sourcesContent":["<template>\n  <div>\n    <v-toolbar flat color=\"white\">\n      <v-toolbar-title class=\"grey--text\">Tests List</v-toolbar-title>\n      <v-divider class=\"mx-2\" inset vertical></v-divider>\n      <v-spacer></v-spacer>\n      <v-dialog v-model=\"dialog\" max-width=\"500px\">\n        <template v-slot:activator=\"{ on }\">\n          <v-btn class=\"btn\" v-on=\"on\" @click=\"resetValidation\">\n            <span aria-hidden=\"true\" class=\"btnLogo\">\n              <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\">\n                <path fill=\"#FF0000\" d=\"M16 16v14h4V20z\" />\n                <path fill=\"#000080\" d=\"M30 16H20l-4 4h14z\" />\n                <path fill=\"#008000\" d=\"M6 16v4h10l4-4z\" />\n                <path fill=\"#FFD700\" d=\"M20 16V6h-4v14z\" />\n                <path fill=\"none\" d=\"M0 0h36v36H0z\" />\n              </svg>\n            </span>\n            <span class=\"btnText\">Create Test</span>\n          </v-btn>\n        </template>\n        <v-card id=\"modal\" v-on:keyup.enter=\"save\">\n          <v-form class=\"px-3\" ref=\"form\">\n            <v-card-title>\n              <span id=\"modalTitle\">{{ formTitle }}</span>\n            </v-card-title>\n            <v-divider></v-divider>\n            <v-card-text>\n              <div class=\"px-3\">\n                <v-text-field\n                  label=\"Test Name\"\n                  v-model=\"editedItem.name\"\n                  prepend-icon=\"add_box\"\n                  :rules=\"nameRules\"\n                ></v-text-field>\n                <v-text-field\n                  label=\"Group\"\n                  v-model=\"editedItem.group\"\n                  prepend-icon=\"add_to_queue\"\n                  :rules=\"groupRules\"\n                ></v-text-field>\n              </div>\n            </v-card-text>\n            <v-divider></v-divider>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn color=\"blue darken-1\" flat @click=\"close\">Cancel</v-btn>\n              <v-btn color=\"blue darken-1\" flat @click=\"save\">Save</v-btn>\n            </v-card-actions>\n          </v-form>\n        </v-card>\n      </v-dialog>\n    </v-toolbar>\n    <v-data-table :headers=\"headers\" :items=\"desserts\" class=\"elevation-1 ma-4\">\n      <template v-slot:items=\"props\">\n        <td class=\"text-xs\">{{ props.item.name }}</td>\n        <td class=\"text-xs\">{{ props.item.group }}</td>\n        <td class=\"text-xs layout px-0\">\n          <v-btn small fab dark color=\"cyan\" class=\"mr-2\" @click=\"editItem(props.item)\">\n            <v-icon>edit</v-icon>\n          </v-btn>\n          <v-btn small fab dark color=\"red\" class=\"mr-2\" @click=\"deleteItem(props.item)\">\n            <v-icon>delete</v-icon>\n          </v-btn>\n        </td>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n\n<script>\nexport default {\n  data: () => ({\n    dialog: false,\n\n    editedIndex: -1,\n    editedItem: {\n      name: \"\",\n      group: \"\"\n    },\n    defaultItem: {\n      name: \"\",\n      group: \"\"\n    },\n    nameRules: [v => !!v || \"Name is required\"],\n    groupRules: [v => !!v || \"Group is required\"]\n  }),\n  computed: {\n    desserts() {\n      return this.$store.getters.getTests;\n    },\n    formTitle() {\n      return this.editedIndex === -1 ? \"Add New Test\" : \"Edit Test\";\n    },\n    headers() {\n      return this.$store.state.testsHeaders;\n    }\n  },\n  watch: {\n    dialog(val) {\n      val || this.close();\n    }\n  },\n  created() {\n    // this.initialize()\n    this.$store.dispatch(\"getTest\");\n  },\n  methods: {\n    reset() {},\n    // initialize () {\n    //   this.desserts = [\n    //     {\n    //       name: 'Frozen Yogurt',\n    //       group: 'Frozen',\n    //     },\n    //     {\n    //       name: 'Ice cream sandwich',\n    //       group: 'cream',\n    //     },\n\n    //   ]\n    // },\n    editItem(item) {\n      this.editedIndex = this.desserts.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      const index = this.desserts.indexOf(item);\n      if (confirm(\"Are you sure you want to delete this item?\")) {\n        this.desserts.splice(index, 1);\n        this.$store.dispatch(\"deleteTest\", item.id);\n      }\n    },\n    close() {\n      this.dialog = false;\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      }, 300);\n    },\n    save() {\n      if (this.$refs.form.validate()) {\n        if (this.editedIndex > -1) {\n          this.$store.dispatch(\"updateTest\", this.editedItem);\n\n          Object.assign(this.desserts[this.editedIndex], this.editedItem);\n        } else {\n          this.$store.dispatch(\"saveTest\", this.editedItem);\n          // this.desserts.push(this.editedItem)\n        }\n        this.close();\n      }\n    },\n    resetValidation() {\n      this.$refs.form.resetValidation();\n    }\n  }\n};\n</script>\n\n<style scoped>\n#modal {\n  font-family: \"Ubuntu\", sans-serif;\n}\n\n#modalTitle {\n  font-size: 20px;\n}\n\n.btn {\n  z-index: 0;\n  background-color: #fff;\n  color: #3c4043;\n  padding: 0 24px;\n  font-family: \"Ubuntu\", sans-serif;\n  font-size: 0.875rem;\n  font-weight: 500;\n  letter-spacing: 0.0107142857em;\n  text-transform: none;\n  line-height: 2.25rem;\n  border-radius: 24px;\n  width: auto;\n  max-width: 100%;\n  height: 48px;\n}\n\n.btnLogo {\n  margin-right: 10px;\n  margin-top: 6px;\n}\n\n.btnText {\n  margin-bottom: 4px;\n}\n</style>"]}]}