{"remainingRequest":"/var/www/prescription_frontEnd/node_modules/thread-loader/dist/cjs.js!/var/www/prescription_frontEnd/node_modules/babel-loader/lib/index.js!/var/www/prescription_frontEnd/node_modules/eslint-loader/index.js??ref--13-0!/var/www/prescription_frontEnd/src/store/store.js","dependencies":[{"path":"/var/www/prescription_frontEnd/src/store/store.js","mtime":1570449941645},{"path":"/var/www/prescription_frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/prescription_frontEnd/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/prescription_frontEnd/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/prescription_frontEnd/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/var/www/prescription_frontEnd/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"/var/www/prescription_frontEnd/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.function.name\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nVue.use(Vuex);\naxios.defaults.baseURL = 'http://local.prescription.com/api/v1';\nexport var store = new Vuex.Store({\n  state: {\n    token: localStorage.getItem('token') || null,\n    patientsHeaders: [{\n      text: 'Serial',\n      value: 'serial'\n    }, {\n      text: 'Name',\n      value: 'name'\n    }, {\n      text: 'Age',\n      value: 'age'\n    }, {\n      text: 'Gender',\n      value: 'gender'\n    }, {\n      text: 'contact',\n      value: 'contact'\n    }, // { text: 'Doctor Name', value: 'doctor_name' },\n    {\n      text: 'Date',\n      value: 'dueDate'\n    }, {\n      text: 'Time',\n      value: 'time'\n    }, {\n      text: 'Action'\n    }],\n    doctorsHeaders: [{\n      text: 'Name',\n      value: 'name'\n    }, {\n      text: 'Email',\n      value: 'email'\n    }, {\n      text: 'contact',\n      value: 'contact'\n    }, {\n      text: 'Workarea',\n      value: 'workarea'\n    }, {\n      text: 'No of Patients',\n      value: 'patient_no'\n    }, {\n      text: 'Action'\n    }],\n    medicinesHeaders: [{\n      text: 'Name',\n      value: 'name'\n    }, // { text: 'Group', value: 'group' },\n    {\n      text: 'Action'\n    }],\n    testsHeaders: [{\n      text: 'Name',\n      value: 'name'\n    }, {\n      text: 'Group',\n      value: 'group'\n    }, {\n      text: 'Action'\n    }],\n    prescriptionHeaders: [{\n      text: 'Date',\n      value: 'created_at'\n    }, {\n      text: 'Symptoms',\n      value: 'prescription_symptom'\n    }, {\n      text: 'Medicine',\n      value: 'medicines'\n    }, {\n      text: 'Tests',\n      value: 'tests'\n    }, {\n      text: 'Action'\n    }],\n    prescriptionHeadByDate: [{\n      text: 'Patient Name',\n      value: 'name'\n    }, {\n      text: 'Contact',\n      value: 'contact'\n    }, {\n      text: 'Date',\n      value: 'created_at'\n    }, {\n      text: 'Symptoms',\n      value: 'prescription_symptom'\n    }, {\n      text: 'Medicine',\n      value: 'medicines'\n    }, {\n      text: 'Tests',\n      value: 'tests'\n    }, {\n      text: 'Action'\n    }],\n    userDetails: [{\n      text: 'Name',\n      value: 'name'\n    }, {\n      text: 'Email',\n      value: 'email'\n    }, {\n      text: 'Role',\n      value: 'user_type'\n    }, {\n      text: 'Action'\n    }],\n    timeSlotHeaders: [{\n      text: 'ID',\n      value: 'id'\n    }, {\n      text: 'Start Time',\n      value: 'startTime'\n    }, {\n      text: 'End Time',\n      value: 'endTime'\n    }, {\n      text: 'Action'\n    }],\n    users: [],\n    userInfo: JSON.parse(localStorage.getItem('userInfo')) || null,\n    country: [],\n    symptomsPrescription: [],\n    medicinesPrescription: [],\n    testsPrescription: [],\n    suggestionsPrescription: '',\n    prescriptionHeadDetails: [],\n    prescriptionHeadDetailsBySearch: [],\n    getPrintHeaderDetails: '',\n    patientScheduleForEdit: '',\n    medicines: [],\n    tests: [],\n    patients: [],\n    patientsBySearch: [],\n    prescriptionBySearch: [],\n    prescriptionByDate: [],\n    patientsJointDetails: [],\n    timeSlots: [],\n    setDefaultDateTime: [],\n    prescriptionDate: '',\n    prescriptionScheduleId: '',\n    patientInList: '',\n    responseMsg: '',\n    snackbar: false,\n    snackbarType: 'success',\n    headerType: ''\n  },\n  getters: {\n    loggedIn: function loggedIn(state) {\n      return state.token !== null;\n    },\n    getUserInfo: function getUserInfo(state) {\n      return state.userInfo;\n    },\n    getCountry: function getCountry(state) {\n      return state.country;\n    },\n    getUsers: function getUsers(state) {\n      return state.users;\n    },\n    getTests: function getTests(state) {\n      return state.tests;\n    },\n    getTestName: function getTestName(state) {\n      return state.testsPrescription;\n    },\n    getMedicines: function getMedicines(state) {\n      return state.medicines;\n    },\n    getSuggestion: function getSuggestion(state) {\n      return state.suggestionsPrescription;\n    },\n    getPatients: function getPatients(state) {\n      return state.patients;\n    },\n    setDefaultDateTime: function setDefaultDateTime(state) {\n      return state.setDefaultDateTime;\n    },\n    getPatientsBySearch: function getPatientsBySearch(state) {\n      return state.patientsBySearch;\n    },\n    getPrescriptionBySearch: function getPrescriptionBySearch(state) {\n      return state.prescriptionBySearch;\n    },\n    getPrescriptionByDate: function getPrescriptionByDate(state) {\n      return state.prescriptionByDate;\n    },\n    patientScheduleForEdit: function patientScheduleForEdit(state) {\n      return state.patientScheduleForEdit;\n    },\n    getJointPatientsDetails: function getJointPatientsDetails(state) {\n      return state.patientsJointDetails;\n    },\n    getPrescriptionHead: function getPrescriptionHead(state) {\n      return state.prescriptionHeadDetails;\n    },\n    getPrescriptionHeadBySearch: function getPrescriptionHeadBySearch(state) {\n      return state.prescriptionHeadDetailsBySearch;\n    },\n    getPrescriptionHeadByDate: function getPrescriptionHeadByDate(state) {\n      return state.prescriptionHeadDetailsByDate;\n    },\n    getPrintHeaderDetails: function getPrintHeaderDetails(state) {\n      return state.getPrintHeaderDetails;\n    },\n    getTimeSlots: function getTimeSlots(state) {\n      return state.timeSlots;\n    }\n  },\n  mutations: {\n    resetPrescription: function resetPrescription(state) {\n      state.testsPrescription = [];\n      state.symptomsPrescription = [];\n      state.medicinesPrescription = [];\n    },\n    resetReport: function resetReport(state) {\n      state.prescriptionHeadDetailsBySearch = [], state.prescriptionBySearch = [];\n    },\n    resetReportByDate: function resetReportByDate(state) {\n      state.prescriptionByDate = [];\n    },\n    getUsers: function getUsers(state, users) {\n      state.users = [];\n      users.map(function (user) {\n        state.users.push({\n          'id': user.id,\n          'name': user.name,\n          'email': user.email,\n          'user_type': user.user_type\n        });\n      });\n    },\n    setUsers: function setUsers(state, user) {\n      state.users.push({\n        'id': user.id,\n        'name': user.name,\n        'email': user.email,\n        'user_type': user.user_type\n      });\n    },\n    getCountry: function getCountry(state, data) {\n      state.country = data;\n      console.log(this.state.country);\n    },\n    userInfo: function userInfo(state, data) {\n      state.userInfo = data; // state.userInfo.push({\n      //   'id': data.id,\n      //   'name': data.name,\n      //   'email': data.email,\n      //   'isadmin': data.isadmin\n      // })\n    },\n    addSymptoms: function addSymptoms(state, symptom) {\n      state.symptomsPrescription.push(symptom);\n    },\n    addSymptomsDatabase: function addSymptomsDatabase(state, symptoms) {\n      state.symptomsPrescription = [];\n      symptoms.map(function (symptom) {\n        state.symptomsPrescription.push(symptom.symptoms);\n      });\n    },\n    addMedicines: function addMedicines(state, medicines) {\n      state.medicinesPrescription.push({\n        'medicine_id': medicines.medicine.id,\n        'medicine_name': medicines.medicine.name,\n        'schedule': medicines.dosages.morning + \"-\" + medicines.dosages.noon + \"-\" + medicines.dosages.night,\n        'duration': medicines.dosages.days\n      });\n    },\n    // addMedicines(state, medicines) {\n    //   state.medicinesPrescription.push({\n    //     'medicine_id': medicines.medicine.id,\n    //     'medicine_name': medicines.medicine.name,\n    //     'schedule': medicines.dosages.dosages.morning + \"-\" + medicines.dosages.dosages.noon + \"-\" + medicines.dosages.dosages.night,\n    //     'duration': medicines.dosages.dosages.days\n    //   });\n    // },\n    addMedicinesDatabase: function addMedicinesDatabase(state, medicines) {\n      state.medicinesPrescription = [];\n      medicines.map(function (medicine) {\n        state.medicinesPrescription.push({\n          'medicine_id': medicine.id,\n          'medicine_name': medicine.name,\n          'schedule': medicine.schedule.schedule,\n          'duration': medicine.schedule.duration\n        });\n      });\n    },\n    addTests: function addTests(state, test) {\n      state.testsPrescription.push({\n        'test_id': test.id,\n        'test_name': test.name\n      });\n    },\n    addTestsDatabase: function addTestsDatabase(state, tests) {\n      state.testsPrescription = [];\n      tests.map(function (test) {\n        state.testsPrescription.push({\n          'test_id': test.id,\n          'test_name': test.name\n        });\n      });\n    },\n    addSuggestion: function addSuggestion(state, suggestion) {\n      state.suggestionsPrescription = suggestion;\n    },\n    saveTest: function saveTest(state, test) {\n      state.tests.push({\n        'group': test.group,\n        'name': test.name\n      });\n    },\n    setAllTests: function setAllTests(state, tests) {\n      state.tests = tests;\n    },\n    saveMedicine: function saveMedicine(state, medicine) {\n      state.medicines.push({\n        'group': medicine.group,\n        'name': medicine.name\n      });\n    },\n    setAllMedicines: function setAllMedicines(state, medicines) {\n      state.medicines = medicines;\n    },\n    savePatients: function savePatients(state, patient) {\n      state.patients.push({\n        'serial': patient.patient_schedule[0].serial,\n        'id': patient.id,\n        'name': patient.name,\n        'age': patient.age,\n        'gender': patient.gender,\n        'contact': patient.contact,\n        'date': patient.patient_schedule[0].date,\n        'time': patient.patient_schedule[0].time_slot.start_time + '-' + patient.patient_schedule[0].time_slot.end_time\n      });\n    },\n    // setAllPatients(state, patients) {\n    //   state.patients = patients;\n    // },\n    setAllPatientsDatabase: function setAllPatientsDatabase(state, patients) {\n      state.patients = [];\n      patients.map(function (patient) {\n        state.patients.push({\n          'id': patient.id,\n          'name': patient.name,\n          'age': patient.age,\n          'gender': patient.gender,\n          'contact': patient.contact,\n          'date': patient.patient_schedule[0].date,\n          'time': patient.patient_schedule[0].time_slot.start_time + '-' + patient.patient_schedule[0].time_slot.end_time,\n          'serial': patient.patient_schedule[0].serial,\n          'visited_count': patient.prescriptions_count,\n          'schedule_id': patient.patient_schedule[0].id\n        });\n      });\n    },\n    getPrintHeaderDetails: function getPrintHeaderDetails(state, data) {\n      state.getPrintHeaderDetails = data;\n    },\n    setDefaultDateTime: function setDefaultDateTime(state, data) {\n      state.setDefaultDateTime = [];\n      state.setDefaultDateTime.push({\n        'date': data.time.date,\n        'time': data.time.start_time + '-' + data.time.end_time\n      });\n    },\n    searchPatientsFromDatabase: function searchPatientsFromDatabase(state, patients) {\n      state.patientsBySearch = [];\n      patients.map(function (patient) {\n        state.patientsBySearch.push({\n          'id': patient.id,\n          'name': patient.name,\n          'age': patient.age,\n          'contact': patient.contact,\n          'gender': patient.gender\n        });\n      });\n    },\n    searchPrescriptionFromDatabase: function searchPrescriptionFromDatabase(state, prescriptions) {\n      state.prescriptionBySearch = [];\n      prescriptions.map(function (prescription) {\n        state.prescriptionBySearch.push(prescription);\n      });\n    },\n    patientInList: function patientInList(state, data) {\n      state.patientInList = data;\n    },\n    searchPrescriptionFromDatabaseByDate: function searchPrescriptionFromDatabaseByDate(state, prescriptions) {\n      state.prescriptionByDate = [];\n      prescriptions.map(function (prescription) {\n        state.prescriptionByDate.push(prescription);\n      });\n    },\n    patientScheduleForEdit: function patientScheduleForEdit(state, data) {\n      state.patientScheduleForEdit = data;\n    },\n    setJointPatientsDetails: function setJointPatientsDetails(state, patients) {\n      state.patientsJointDetails = patients;\n    },\n    savePrescriptionHead: function savePrescriptionHead(state, data) {\n      state.prescriptionHeadDetails = data;\n    },\n    savePrescriptionHeadBySearch: function savePrescriptionHeadBySearch(state, data) {\n      state.prescriptionHeadDetailsBySearch = data;\n    },\n    retrieveToken: function retrieveToken(state, token) {\n      state.token = token;\n    },\n    destroyToken: function destroyToken(state, token) {\n      state.token = null;\n    },\n    setResponseMsg: function setResponseMsg(state, response) {\n      state.responseMsg = response.data.resMsg;\n\n      if (state.responseMsg.length > 0) {\n        state.snackbar = true;\n      }\n\n      state.snackbarType = 'success';\n\n      if (response.data.error) {\n        state.snackbarType = 'error';\n      }\n    },\n    responseMsgRmv: function responseMsgRmv(state) {\n      state.responseMsg = '';\n\n      if (state.responseMsg.length == 0) {\n        state.snackbar = false;\n      }\n    },\n    prescriptionDate: function prescriptionDate(state, date) {\n      state.prescriptionDate = date;\n    },\n    prescriptionScheduleId: function prescriptionScheduleId(state, data) {\n      state.prescriptionScheduleId = data;\n    },\n    setTimeSlot: function setTimeSlot(state, timeslot) {\n      state.timeSlots.push({\n        'id': timeslot.id,\n        'start_time': timeslot.start_time,\n        'end_time': timeslot.end_time,\n        'time': timeslot.start_time + '-' + timeslot.end_time\n      });\n    },\n    getTimeSlot: function getTimeSlot(state, timeslots) {\n      state.timeSlots = [];\n      timeslots.map(function (timeslot) {\n        state.timeSlots.push({\n          'id': timeslot.id,\n          'start_time': timeslot.start_time,\n          'end_time': timeslot.end_time,\n          'time': timeslot.start_time + '-' + timeslot.end_time\n        });\n      });\n    }\n  },\n  actions: {\n    patientById: function patientById(context, id) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.get('/patients/' + id).then(function (response) {\n            if (!response.data.error) {\n              context.commit('savePrescriptionHead', response.data.data);\n            }\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    register: function register(context, data) {\n      console.log(data);\n      return new _Promise(function (resolve, reject) {\n        axios.post('/signup', data).then(function (response) {\n          if (response.data.error) {\n            context.commit('setResponseMsg', response);\n          } else {\n            var token = response.data.token;\n            localStorage.setItem('token', token);\n            context.commit('retrieveToken', token);\n            localStorage.setItem('userInfo', _JSON$stringify(response.data.user)); // console.log(JSON.parse(localStorage.getItem('userInfo')))\n\n            context.commit('userInfo', response.data.user);\n          }\n\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    registerUser: function registerUser(context, data) {\n      console.log(data);\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/register', data).then(function (response) {\n            console.log('userlist');\n            console.log(response.data);\n            context.commit('setResponseMsg', response);\n\n            if (!response.data.error) {\n              context.commit('setUsers', response.data.data);\n            }\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getUsers: function getUsers(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.get('/user').then(function (response) {\n            console.log(response.data);\n            context.commit('getUsers', response.data);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    updateUser: function updateUser(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.put('/updateUser/' + data.id, data).then(function (response) {\n            context.commit('setResponseMsg', response);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    retrieveToken: function retrieveToken(context, credentials) {\n      return new _Promise(function (resolve, reject) {\n        axios.post('/login', {\n          email: credentials.email,\n          password: credentials.password\n        }).then(function (response) {\n          if (response.data.error) {\n            context.commit('setResponseMsg', response);\n          } else {\n            var token = response.data.token;\n            localStorage.setItem('token', token);\n            context.commit('retrieveToken', token);\n            localStorage.setItem('userInfo', _JSON$stringify(response.data.user)); // console.log(JSON.parse(localStorage.getItem('userInfo')))\n\n            context.commit('userInfo', response.data.user);\n          }\n\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    destroyToken: function destroyToken(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.get('/logout').then(function (response) {\n            localStorage.removeItem('token');\n            context.commit('destroyToken');\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    saveTest: function saveTest(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/tests', data).then(function (response) {\n            context.commit('setResponseMsg', response);\n\n            if (!response.data.error) {\n              context.commit('saveTest', response.data.data);\n            }\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getTest: function getTest(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.get('/tests').then(function (response) {\n            context.commit('setAllTests', response.data.data);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    deleteTest: function deleteTest(context, id) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.delete('/tests/' + id).then(function (response) {\n            context.commit('setResponseMsg', response);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    updateTest: function updateTest(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.put('/tests/' + data.id, data).then(function (response) {\n            context.commit('setResponseMsg', response);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    saveMedicine: function saveMedicine(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/medicines', data).then(function (response) {\n            context.commit('setResponseMsg', response);\n\n            if (!response.data.error) {\n              context.commit('saveMedicine', response.data.data);\n            }\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getMedicine: function getMedicine(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.get('/medicines').then(function (response) {\n            context.commit('setAllMedicines', response.data.data);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    deleteMedicine: function deleteMedicine(context, id) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.delete('/medicines/' + id).then(function (response) {\n            context.commit('setResponseMsg', response);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    updateMedicine: function updateMedicine(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.put('/medicines/' + data.id, data).then(function (response) {\n            context.commit('setResponseMsg', response);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    savePatient: function savePatient(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/patients', data).then(function (response) {\n            context.commit('setResponseMsg', response);\n\n            if (!response.data.error) {\n              context.commit('savePatients', response.data.data);\n            }\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getPatient: function getPatient(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.get('/patients').then(function (response) {\n            // context.commit('setAllPatients', response.data.data)\n            context.commit('setAllPatientsDatabase', response.data.data.patients);\n            context.commit('setDefaultDateTime', response.data.data);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    deletePatient: function deletePatient(context, id) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.delete('/patients/' + id).then(function (response) {\n            context.commit('setResponseMsg', response);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    updatePatient: function updatePatient(context, data) {\n      console.log(data);\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.put('/patients/' + data.id, data).then(function (response) {\n            context.commit('setResponseMsg', response);\n\n            if (!response.data.error) {\n              context.commit('savePatients', response.data.data);\n            }\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    savePrescription: function savePrescription(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        var data = {\n          patient_id: this.state.prescriptionHeadDetails.id,\n          symptoms: this.state.symptomsPrescription,\n          medicine_schedule: this.state.medicinesPrescription,\n          test_ids: this.state.testsPrescription,\n          suggestions: this.state.suggestionsPrescription,\n          date: this.state.prescriptionDate,\n          schedule_id: this.state.prescriptionScheduleId\n        };\n        return new _Promise(function (resolve, reject) {\n          axios.post('/prescriptions', data).then(function (response) {\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getPrescription: function getPrescription(context, prescriptionId) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.get('/prescriptions/' + prescriptionId).then(function (response) {\n            context.commit('savePrescriptionHead', response.data.data.patient);\n            context.commit('addSuggestion', response.data.data.prescription_suggestion.suggestion);\n            context.commit('addSymptomsDatabase', response.data.data.prescription_symptom);\n            context.commit('addTestsDatabase', response.data.data.tests);\n            context.commit('addMedicinesDatabase', response.data.data.medicines);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    retrievePatientbyDate: function retrievePatientbyDate(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/retrievePatientByDate', data).then(function (response) {\n            context.commit('setAllPatientsDatabase', response.data.data);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    retrievePatientbySearch: function retrievePatientbySearch(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/retrievePatientBySearch', data).then(function (response) {\n            context.commit('searchPatientsFromDatabase', response.data.data);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getPrescriptionReport: function getPrescriptionReport(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/getPrescriptionForShow', data).then(function (response) {\n            context.commit('searchPrescriptionFromDatabase', response.data.data.prescription);\n            context.commit('savePrescriptionHeadBySearch', response.data.data.patientDetails);\n            context.commit('patientInList', response.data.data.patientInList);\n            context.commit('patientScheduleForEdit', response.data.data.patientSchedule);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    retrievePrescriptionbyDate: function retrievePrescriptionbyDate(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/retrievePrescriptionByDate', data).then(function (response) {\n            context.commit('searchPrescriptionFromDatabaseByDate', response.data.data); // context.commit('setAllPatientsDatabase', response.data.data)\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    saveTimeSlot: function saveTimeSlot(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/time-slot', data).then(function (response) {\n            context.commit('setTimeSlot', response.data.data);\n            context.commit('setResponseMsg', response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getTimeSlot: function getTimeSlot(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.get('/time-slot').then(function (response) {\n            context.commit('getTimeSlot', response.data.data); // context.commit('setAllPatientsDatabase', response.data.data)\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    updateTimeSlot: function updateTimeSlot(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.put('/time-slot/' + data.id, data).then(function (response) {\n            context.commit('setResponseMsg', response);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    savePrintHeaderDetails: function savePrintHeaderDetails(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/printPage', data).then(function (response) {\n            context.commit('setResponseMsg', response); // context.commit('searchPrescriptionFromDatabase', response.data.data)\n            // context.commit('setAllPatientsDatabase', response.data.data)\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getPrintHeaderDetails: function getPrintHeaderDetails(context, data) {\n      var _this = this;\n\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.get('/printPage', data).then(function (response) {\n            if (response.data.data.headerType.value == 'withHeader') {\n              // console.log(response.data.data.withHeader)\n              context.commit('getPrintHeaderDetails', response.data.data.withHeader);\n              _this.state.headerType = response.data.data.headerType.value;\n            } else {\n              context.commit('getPrintHeaderDetails', response.data.data.withoutHeader);\n              _this.state.headerType = response.data.data.headerType.value;\n            } // context.commit('setAllPatientsDatabase', response.data.data)\n\n\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getDetailsForEditPrescription: function getDetailsForEditPrescription(context, data) {\n      var prescription_id = {\n        prescription_id: data\n      };\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token;\n\n      if (context.getters.loggedIn) {\n        return new _Promise(function (resolve, reject) {\n          axios.post('/editPrescriptions', prescription_id).then(function (response) {\n            context.commit('addSuggestion', response.data.data.prescription_suggestion.suggestion);\n            context.commit('addSymptomsDatabase', response.data.data.prescription_symptom);\n            context.commit('addTestsDatabase', response.data.data.tests);\n            context.commit('addMedicinesDatabase', response.data.data.medicines);\n            resolve(response);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      }\n    },\n    getCountry: function getCountry(context) {\n      console.log('store');\n      return new _Promise(function (resolve, reject) {\n        axios.get('/getCountry').then(function (response) {\n          // console.log(response.data.data)\n          context.commit('getCountry', response.data.data);\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n});",{"version":3,"sources":["/var/www/prescription_frontEnd/src/store/store.js"],"names":["Vue","Vuex","axios","use","defaults","baseURL","store","Store","state","token","localStorage","getItem","patientsHeaders","text","value","doctorsHeaders","medicinesHeaders","testsHeaders","prescriptionHeaders","prescriptionHeadByDate","userDetails","timeSlotHeaders","users","userInfo","JSON","parse","country","symptomsPrescription","medicinesPrescription","testsPrescription","suggestionsPrescription","prescriptionHeadDetails","prescriptionHeadDetailsBySearch","getPrintHeaderDetails","patientScheduleForEdit","medicines","tests","patients","patientsBySearch","prescriptionBySearch","prescriptionByDate","patientsJointDetails","timeSlots","setDefaultDateTime","prescriptionDate","prescriptionScheduleId","patientInList","responseMsg","snackbar","snackbarType","headerType","getters","loggedIn","getUserInfo","getCountry","getUsers","getTests","getTestName","getMedicines","getSuggestion","getPatients","getPatientsBySearch","getPrescriptionBySearch","getPrescriptionByDate","getJointPatientsDetails","getPrescriptionHead","getPrescriptionHeadBySearch","getPrescriptionHeadByDate","prescriptionHeadDetailsByDate","getTimeSlots","mutations","resetPrescription","resetReport","resetReportByDate","map","user","push","id","name","email","user_type","setUsers","data","console","log","addSymptoms","symptom","addSymptomsDatabase","symptoms","addMedicines","medicine","dosages","morning","noon","night","days","addMedicinesDatabase","schedule","duration","addTests","test","addTestsDatabase","addSuggestion","suggestion","saveTest","group","setAllTests","saveMedicine","setAllMedicines","savePatients","patient","patient_schedule","serial","age","gender","contact","date","time_slot","start_time","end_time","setAllPatientsDatabase","prescriptions_count","time","searchPatientsFromDatabase","searchPrescriptionFromDatabase","prescriptions","prescription","searchPrescriptionFromDatabaseByDate","setJointPatientsDetails","savePrescriptionHead","savePrescriptionHeadBySearch","retrieveToken","destroyToken","setResponseMsg","response","resMsg","length","error","responseMsgRmv","setTimeSlot","timeslot","getTimeSlot","timeslots","actions","patientById","context","headers","common","resolve","reject","get","then","commit","catch","register","post","setItem","registerUser","updateUser","put","credentials","password","removeItem","getTest","deleteTest","delete","updateTest","getMedicine","deleteMedicine","updateMedicine","savePatient","getPatient","deletePatient","updatePatient","savePrescription","patient_id","medicine_schedule","test_ids","suggestions","schedule_id","getPrescription","prescriptionId","prescription_suggestion","prescription_symptom","retrievePatientbyDate","retrievePatientbySearch","getPrescriptionReport","patientDetails","patientSchedule","retrievePrescriptionbyDate","saveTimeSlot","updateTimeSlot","savePrintHeaderDetails","withHeader","withoutHeader","getDetailsForEditPrescription","prescription_id"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios'\n\nVue.use(Vuex);\naxios.defaults.baseURL = 'http://local.prescription.com/api/v1'\n\nexport const store = new Vuex.Store({\n  state: {\n    token: localStorage.getItem('token') || null,\n    patientsHeaders: [{\n      text: 'Serial',\n      value: 'serial'\n    },\n    {\n      text: 'Name',\n      value: 'name'\n    },\n    {\n      text: 'Age',\n      value: 'age'\n    },\n    {\n      text: 'Gender',\n      value: 'gender'\n    },\n    {\n      text: 'contact',\n      value: 'contact'\n    },\n    // { text: 'Doctor Name', value: 'doctor_name' },\n    {\n      text: 'Date',\n      value: 'dueDate'\n    },\n    {\n      text: 'Time',\n      value: 'time'\n    },\n    {\n      text: 'Action'\n    }\n    ],\n    doctorsHeaders: [{\n      text: 'Name',\n      value: 'name'\n    },\n    {\n      text: 'Email',\n      value: 'email'\n    },\n    {\n      text: 'contact',\n      value: 'contact'\n    },\n    {\n      text: 'Workarea',\n      value: 'workarea'\n    },\n    {\n      text: 'No of Patients',\n      value: 'patient_no'\n    },\n    {\n      text: 'Action'\n    }\n    ],\n    medicinesHeaders: [{\n      text: 'Name',\n      value: 'name'\n    },\n    // { text: 'Group', value: 'group' },\n    {\n      text: 'Action'\n    }\n    ],\n    testsHeaders: [{\n      text: 'Name',\n      value: 'name'\n    },\n    {\n      text: 'Group',\n      value: 'group'\n    },\n    {\n      text: 'Action'\n    }\n    ],\n    prescriptionHeaders: [{\n      text: 'Date',\n      value: 'created_at'\n    },\n    {\n      text: 'Symptoms',\n      value: 'prescription_symptom'\n    },\n    {\n      text: 'Medicine',\n      value: 'medicines'\n    },\n    {\n      text: 'Tests',\n      value: 'tests'\n    },\n    {\n      text: 'Action'\n    }\n    ],\n    prescriptionHeadByDate: [{\n      text: 'Patient Name',\n      value: 'name'\n    },\n    {\n      text: 'Contact',\n      value: 'contact'\n    },\n    {\n      text: 'Date',\n      value: 'created_at'\n    },\n    {\n      text: 'Symptoms',\n      value: 'prescription_symptom'\n    },\n    {\n      text: 'Medicine',\n      value: 'medicines'\n    },\n    {\n      text: 'Tests',\n      value: 'tests'\n    },\n    {\n      text: 'Action'\n    }\n    ],\n    userDetails: [{\n      text: 'Name',\n      value: 'name'\n    },\n    {\n      text: 'Email',\n      value: 'email'\n    },\n    {\n      text: 'Role',\n      value: 'user_type'\n    },\n    {\n      text: 'Action'\n    }\n    ],\n    timeSlotHeaders: [{\n      text: 'ID',\n      value: 'id'\n    },\n    {\n      text: 'Start Time',\n      value: 'startTime'\n    },\n    {\n      text: 'End Time',\n      value: 'endTime'\n    },\n    {\n      text: 'Action'\n    }\n    ],\n    users: [],\n    userInfo: JSON.parse(localStorage.getItem('userInfo')) || null,\n    country: [],\n    symptomsPrescription: [],\n    medicinesPrescription: [],\n    testsPrescription: [],\n    suggestionsPrescription: '',\n    prescriptionHeadDetails: [],\n    prescriptionHeadDetailsBySearch: [],\n    getPrintHeaderDetails: '',\n    patientScheduleForEdit: '',\n    medicines: [],\n    tests: [],\n    patients: [],\n    patientsBySearch: [],\n    prescriptionBySearch: [],\n    prescriptionByDate: [],\n    patientsJointDetails: [],\n    timeSlots: [],\n    setDefaultDateTime: [],\n    prescriptionDate: '',\n    prescriptionScheduleId: '',\n    patientInList: '',\n    responseMsg: '',\n    snackbar: false,\n    snackbarType: 'success',\n    headerType: ''\n  },\n\n  getters: {\n    loggedIn(state) {\n      return state.token !== null\n    },\n    getUserInfo: (state) => {\n      return state.userInfo\n    },\n    getCountry: (state) => {\n      return state.country\n    },\n    getUsers: (state) => {\n      return state.users\n    },\n    getTests: (state) => {\n      return state.tests\n    },\n    getTestName: (state) => {\n      return state.testsPrescription\n    },\n    getMedicines: (state) => {\n      return state.medicines\n    },\n    getSuggestion: (state) => {\n      return state.suggestionsPrescription\n    },\n    getPatients: (state) => {\n      return state.patients\n    },\n    setDefaultDateTime: (state) => {\n      return state.setDefaultDateTime\n    },\n    getPatientsBySearch: (state) => {\n      return state.patientsBySearch\n    },\n    getPrescriptionBySearch: (state) => {\n      return state.prescriptionBySearch\n    },\n    getPrescriptionByDate: (state) => {\n      return state.prescriptionByDate\n    },\n    patientScheduleForEdit: (state) => {\n      return state.patientScheduleForEdit\n    },\n    getJointPatientsDetails: (state) => {\n      return state.patientsJointDetails\n    },\n    getPrescriptionHead: (state) => {\n      return state.prescriptionHeadDetails\n    },\n    getPrescriptionHeadBySearch: (state) => {\n      return state.prescriptionHeadDetailsBySearch\n    },\n    getPrescriptionHeadByDate: (state) => {\n      return state.prescriptionHeadDetailsByDate\n    },\n    getPrintHeaderDetails: (state) => {\n      return state.getPrintHeaderDetails\n    },\n    getTimeSlots: (state) => {\n      return state.timeSlots\n    }\n  },\n  mutations: {\n    resetPrescription(state) {\n      state.testsPrescription = []\n      state.symptomsPrescription = [];\n      state.medicinesPrescription = [];\n    },\n    resetReport(state) {\n      state.prescriptionHeadDetailsBySearch = [],\n        state.prescriptionBySearch = []\n    },\n    resetReportByDate(state) {\n      state.prescriptionByDate = []\n    },\n    getUsers(state, users) {\n      state.users = [];\n      users.map(function (user) {\n        state.users.push({\n          'id': user.id,\n          'name': user.name,\n          'email': user.email,\n          'user_type': user.user_type\n        });\n      });\n    },\n    setUsers(state, user) {\n      state.users.push({\n        'id': user.id,\n        'name': user.name,\n        'email': user.email,\n        'user_type': user.user_type\n      });\n\n    },\n    getCountry(state, data) {\n      state.country = data\n\n      console.log(this.state.country)\n    },\n    userInfo(state, data) {\n      state.userInfo = data\n      // state.userInfo.push({\n      //   'id': data.id,\n      //   'name': data.name,\n      //   'email': data.email,\n      //   'isadmin': data.isadmin\n      // })\n    },\n    addSymptoms(state, symptom) {\n      state.symptomsPrescription.push(symptom);\n\n    },\n    addSymptomsDatabase(state, symptoms) {\n      state.symptomsPrescription = [];\n\n      symptoms.map(function (symptom) {\n        state.symptomsPrescription.push(symptom.symptoms);\n      });\n\n    },\n    addMedicines(state, medicines) {\n      state.medicinesPrescription.push({\n        'medicine_id': medicines.medicine.id,\n        'medicine_name': medicines.medicine.name,\n        'schedule': medicines.dosages.morning + \"-\" + medicines.dosages.noon + \"-\" + medicines.dosages.night,\n        'duration': medicines.dosages.days\n      });\n    },\n    // addMedicines(state, medicines) {\n    //   state.medicinesPrescription.push({\n    //     'medicine_id': medicines.medicine.id,\n    //     'medicine_name': medicines.medicine.name,\n    //     'schedule': medicines.dosages.dosages.morning + \"-\" + medicines.dosages.dosages.noon + \"-\" + medicines.dosages.dosages.night,\n    //     'duration': medicines.dosages.dosages.days\n    //   });\n    // },\n    addMedicinesDatabase(state, medicines) {\n      state.medicinesPrescription = [];\n\n      medicines.map(function (medicine) {\n        state.medicinesPrescription.push({\n          'medicine_id': medicine.id,\n          'medicine_name': medicine.name,\n          'schedule': medicine.schedule.schedule,\n          'duration': medicine.schedule.duration\n        });\n      });\n    },\n    addTests(state, test) {\n      state.testsPrescription.push({\n        'test_id': test.id,\n        'test_name': test.name\n      });\n\n    },\n    addTestsDatabase(state, tests) {\n      state.testsPrescription = [];\n\n      tests.map(function (test) {\n        state.testsPrescription.push({\n          'test_id': test.id,\n          'test_name': test.name\n        });\n      });\n\n    },\n    addSuggestion(state, suggestion) {\n      state.suggestionsPrescription = suggestion;\n    },\n    saveTest(state, test) {\n      state.tests.push({\n        'group': test.group,\n        'name': test.name\n      });\n    },\n    setAllTests(state, tests) {\n      state.tests = tests;\n    },\n    saveMedicine(state, medicine) {\n      state.medicines.push({\n        'group': medicine.group,\n        'name': medicine.name\n      });\n    },\n    setAllMedicines(state, medicines) {\n      state.medicines = medicines;\n    },\n    savePatients(state, patient) {\n\n      state.patients.push({\n        'serial': patient.patient_schedule[0].serial,\n        'id': patient.id,\n        'name': patient.name,\n        'age': patient.age,\n        'gender': patient.gender,\n        'contact': patient.contact,\n        'date': patient.patient_schedule[0].date,\n        'time': patient.patient_schedule[0].time_slot.start_time + '-' + patient.patient_schedule[0].time_slot.end_time,\n      });\n    },\n    // setAllPatients(state, patients) {\n    //   state.patients = patients;\n    // },\n    setAllPatientsDatabase(state, patients) {\n      state.patients = []\n      patients.map(function (patient) {\n        state.patients.push({\n          'id': patient.id,\n          'name': patient.name,\n          'age': patient.age,\n          'gender': patient.gender,\n          'contact': patient.contact,\n          'date': patient.patient_schedule[0].date,\n          'time': patient.patient_schedule[0].time_slot.start_time + '-' + patient.patient_schedule[0].time_slot.end_time,\n          'serial': patient.patient_schedule[0].serial,\n          'visited_count': patient.prescriptions_count,\n          'schedule_id': patient.patient_schedule[0].id\n        });\n      });\n    },\n    getPrintHeaderDetails(state, data) {\n      state.getPrintHeaderDetails = data\n    },\n    setDefaultDateTime(state, data) {\n      state.setDefaultDateTime = []\n      state.setDefaultDateTime.push({\n        'date': data.time.date,\n        'time': data.time.start_time + '-' + data.time.end_time\n      })\n    },\n    searchPatientsFromDatabase(state, patients) {\n      state.patientsBySearch = [];\n      patients.map(function (patient) {\n        state.patientsBySearch.push({\n          'id': patient.id,\n          'name': patient.name,\n          'age': patient.age,\n          'contact': patient.contact,\n          'gender': patient.gender\n        });\n      });\n    },\n    searchPrescriptionFromDatabase(state, prescriptions) {\n      state.prescriptionBySearch = [];\n      prescriptions.map(function (prescription) {\n        state.prescriptionBySearch.push(prescription);\n      });\n\n    },\n    patientInList(state, data) {\n      state.patientInList = data;\n    },\n    searchPrescriptionFromDatabaseByDate(state, prescriptions) {\n      state.prescriptionByDate = [];\n      prescriptions.map(function (prescription) {\n        state.prescriptionByDate.push(prescription);\n      });\n    },\n    patientScheduleForEdit(state, data) {\n      state.patientScheduleForEdit = data\n    },\n    setJointPatientsDetails(state, patients) {\n      state.patientsJointDetails = patients;\n    },\n    savePrescriptionHead(state, data) {\n      state.prescriptionHeadDetails = data;\n    },\n    savePrescriptionHeadBySearch(state, data) {\n      state.prescriptionHeadDetailsBySearch = data;\n    },\n    retrieveToken(state, token) {\n      state.token = token\n    },\n    destroyToken(state, token) {\n      state.token = null\n    },\n    setResponseMsg: (state, response) => {\n      state.responseMsg = response.data.resMsg\n      if (state.responseMsg.length > 0) {\n        state.snackbar = true\n      }\n\n      state.snackbarType = 'success'\n      if (response.data.error) {\n        state.snackbarType = 'error'\n      }\n\n    },\n    responseMsgRmv(state) {\n      state.responseMsg = '';\n      if (state.responseMsg.length == 0) {\n        state.snackbar = false\n      }\n    },\n    prescriptionDate(state, date) {\n      state.prescriptionDate = date\n    },\n    prescriptionScheduleId(state, data) {\n      state.prescriptionScheduleId = data\n    },\n    setTimeSlot(state, timeslot) {\n\n      state.timeSlots.push({\n        'id': timeslot.id,\n        'start_time': timeslot.start_time,\n        'end_time': timeslot.end_time,\n        'time': timeslot.start_time + '-' + timeslot.end_time\n      })\n\n    },\n    getTimeSlot(state, timeslots) {\n      state.timeSlots = []\n      timeslots.map(function (timeslot) {\n        state.timeSlots.push({\n          'id': timeslot.id,\n          'start_time': timeslot.start_time,\n          'end_time': timeslot.end_time,\n          'time': timeslot.start_time + '-' + timeslot.end_time\n        })\n      })\n\n    }\n  },\n  actions: {\n    patientById(context, id) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.get('/patients/' + id)\n            .then(response => {\n              if (!response.data.error) {\n                context.commit('savePrescriptionHead', response.data.data)\n              }\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    register(context, data) {\n      console.log(data)\n      return new Promise((resolve, reject) => {\n        axios.post('/signup', data)\n          .then(response => {\n            if (response.data.error) {\n              context.commit('setResponseMsg', response)\n            } else {\n              const token = response.data.token\n\n              localStorage.setItem('token', token)\n              context.commit('retrieveToken', token)\n              localStorage.setItem('userInfo', JSON.stringify(response.data.user))\n              // console.log(JSON.parse(localStorage.getItem('userInfo')))\n              context.commit('userInfo', response.data.user)\n            }\n\n            resolve(response)\n          })\n          .catch(error => {\n            reject(error)\n          })\n      })\n    },\n    registerUser(context, data) {\n      console.log(data)\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/register', data)\n            .then(response => {\n              console.log('userlist')\n              console.log(response.data)\n              context.commit('setResponseMsg', response)\n              if (!response.data.error) {\n                context.commit('setUsers', response.data.data)\n              }\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getUsers(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.get('/user')\n            .then(response => {\n              console.log(response.data)\n\n              context.commit('getUsers', response.data)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    updateUser(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.put('/updateUser/' + data.id, data)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    retrieveToken(context, credentials) {\n\n      return new Promise((resolve, reject) => {\n        axios.post('/login', {\n          email: credentials.email,\n          password: credentials.password,\n        })\n          .then(response => {\n            if (response.data.error) {\n              context.commit('setResponseMsg', response)\n            } else {\n              const token = response.data.token\n\n              localStorage.setItem('token', token)\n              context.commit('retrieveToken', token)\n              localStorage.setItem('userInfo', JSON.stringify(response.data.user))\n              // console.log(JSON.parse(localStorage.getItem('userInfo')))\n              context.commit('userInfo', response.data.user)\n            }\n\n            resolve(response)\n          })\n          .catch(error => {\n            reject(error)\n          })\n      })\n    },\n    destroyToken(context) {\n\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.get('/logout')\n            .then(response => {\n              localStorage.removeItem('token')\n              context.commit('destroyToken')\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    saveTest(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/tests', data)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              if (!response.data.error) {\n                context.commit('saveTest', response.data.data)\n              }\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getTest(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.get('/tests')\n            .then(response => {\n              context.commit('setAllTests', response.data.data)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    deleteTest(context, id) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.delete('/tests/' + id)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    updateTest(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.put('/tests/' + data.id, data)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    saveMedicine(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/medicines', data)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              if (!response.data.error) {\n                context.commit('saveMedicine', response.data.data)\n              }\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getMedicine(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.get('/medicines')\n            .then(response => {\n              context.commit('setAllMedicines', response.data.data)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    deleteMedicine(context, id) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.delete('/medicines/' + id)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    updateMedicine(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.put('/medicines/' + data.id, data)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    savePatient(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/patients', data)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              if (!response.data.error) {\n                context.commit('savePatients', response.data.data)\n              }\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getPatient(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.get('/patients')\n            .then(response => {\n              // context.commit('setAllPatients', response.data.data)\n              context.commit('setAllPatientsDatabase', response.data.data.patients)\n              context.commit('setDefaultDateTime', response.data.data)\n\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    deletePatient(context, id) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.delete('/patients/' + id)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    updatePatient(context, data) {\n      console.log(data)\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.put('/patients/' + data.id, data)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              if (!response.data.error) {\n                context.commit('savePatients', response.data.data)\n              }\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    savePrescription(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        var data = {\n          patient_id: this.state.prescriptionHeadDetails.id,\n          symptoms: this.state.symptomsPrescription,\n          medicine_schedule: this.state.medicinesPrescription,\n          test_ids: this.state.testsPrescription,\n          suggestions: this.state.suggestionsPrescription,\n          date: this.state.prescriptionDate,\n          schedule_id: this.state.prescriptionScheduleId\n        }\n        return new Promise((resolve, reject) => {\n          axios.post('/prescriptions', data)\n            .then(response => {\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getPrescription(context, prescriptionId) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.get('/prescriptions/' + prescriptionId)\n            .then(response => {\n              context.commit('savePrescriptionHead', response.data.data.patient)\n              context.commit('addSuggestion', response.data.data.prescription_suggestion.suggestion)\n              context.commit('addSymptomsDatabase', response.data.data.prescription_symptom)\n              context.commit('addTestsDatabase', response.data.data.tests)\n              context.commit('addMedicinesDatabase', response.data.data.medicines)\n\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    retrievePatientbyDate(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/retrievePatientByDate', data)\n            .then(response => {\n              context.commit('setAllPatientsDatabase', response.data.data)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    retrievePatientbySearch(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/retrievePatientBySearch', data)\n            .then(response => {\n              context.commit('searchPatientsFromDatabase', response.data.data)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getPrescriptionReport(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/getPrescriptionForShow', data)\n            .then(response => {\n              context.commit('searchPrescriptionFromDatabase', response.data.data.prescription)\n              context.commit('savePrescriptionHeadBySearch', response.data.data.patientDetails)\n              context.commit('patientInList', response.data.data.patientInList)\n              context.commit('patientScheduleForEdit', response.data.data.patientSchedule)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    retrievePrescriptionbyDate(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/retrievePrescriptionByDate', data)\n            .then(response => {\n              context.commit('searchPrescriptionFromDatabaseByDate', response.data.data)\n              // context.commit('setAllPatientsDatabase', response.data.data)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    saveTimeSlot(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/time-slot', data)\n            .then(response => {\n              context.commit('setTimeSlot', response.data.data)\n              context.commit('setResponseMsg', response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getTimeSlot(context) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.get('/time-slot')\n            .then(response => {\n              context.commit('getTimeSlot', response.data.data)\n              // context.commit('setAllPatientsDatabase', response.data.data)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    updateTimeSlot(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.put('/time-slot/' + data.id, data)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    savePrintHeaderDetails(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/printPage', data)\n            .then(response => {\n              context.commit('setResponseMsg', response)\n\n              // context.commit('searchPrescriptionFromDatabase', response.data.data)\n              // context.commit('setAllPatientsDatabase', response.data.data)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getPrintHeaderDetails(context, data) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.get('/printPage', data)\n            .then(response => {\n              if (response.data.data.headerType.value == 'withHeader') {\n                // console.log(response.data.data.withHeader)\n                context.commit('getPrintHeaderDetails', response.data.data.withHeader)\n                this.state.headerType = response.data.data.headerType.value\n\n              } else {\n                context.commit('getPrintHeaderDetails', response.data.data.withoutHeader)\n                this.state.headerType = response.data.data.headerType.value\n              }\n              // context.commit('setAllPatientsDatabase', response.data.data)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getDetailsForEditPrescription(context, data) {\n      var prescription_id = {\n        prescription_id: data\n      }\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + context.state.token\n      if (context.getters.loggedIn) {\n        return new Promise((resolve, reject) => {\n          axios.post('/editPrescriptions', prescription_id)\n            .then(response => {\n              context.commit('addSuggestion', response.data.data.prescription_suggestion.suggestion)\n              context.commit('addSymptomsDatabase', response.data.data.prescription_symptom)\n              context.commit('addTestsDatabase', response.data.data.tests)\n              context.commit('addMedicinesDatabase', response.data.data.medicines)\n              resolve(response)\n            })\n            .catch(error => {\n              reject(error)\n            })\n        })\n      }\n    },\n    getCountry(context) {\n      console.log('store');\n      return new Promise((resolve, reject) => {\n        axios.get('/getCountry')\n          .then(response => {\n            // console.log(response.data.data)\n            context.commit('getCountry', response.data.data)\n            resolve(response)\n          })\n          .catch(error => {\n            reject(error)\n          })\n      })\n    }\n  }\n})"]}]}